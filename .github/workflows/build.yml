name: Build and Release (Draft)

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build, Test and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

  build-app:
      strategy:
        fail-fast: false

        matrix:
          os: [ windows-latest, ubuntu-latest, macos-latest ]
          include:
            - os: windows-latest
              script: "build:win"
            - os: ubuntu-latest
              script: "build:linux"
            - os: macos-latest
              script: "build:mac"

      runs-on: ${{ matrix.os }}
      steps:
        - uses: actions/checkout@v4

        - name: setup node
          uses: actions/setup-node@v4
          with:
            node-version: 22

        - name: Setup
          run: npm ci

        - name: Tooling (Linux)
          if: matrix.os == 'ubuntu-latest'
          run: |
            sudo apt update
            sudo apt install snapd
            sudo snap install --classic snapcraft

        - name: Tooling (Win)
          if: matrix.os == 'windows-latest'
          run: |
            npm install -g win-node-env

        - name: Test
          run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless
          continue-on-error: true

        - name: Build and Publish
          run: npm run ${{matrix.script}}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: Decode and Import Certificate
          if: matrix.os == 'macos-latest'
          run: |
            echo "$APPLE_CERT_P12" | base64 --decode > certificate.p12
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security import certificate.p12 -k build.keychain -P "$APPLE_CERT_P12_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

        - name: Sign app
          if: matrix.os == 'macos-latest'
          run: |
            codesign --deep --force --verify --verbose \
              --sign "Developer ID Application" \
              "dist/mac/Sunce Wallet.app"

        - name: Notarize app
          if: matrix.os == 'macos-latest'
          run: |
            ditto -c -k --sequesterRsrc --keepParent "dist/mac/Sunce Wallet.app" SunceWallet.zip
            xcrun altool --notarize-app \
              --primary-bundle-id "com.sunce.wallet" \
              --username "$APPLE_DEVELOPER_ID" \
              --password "$APP_SPECIFIC_PASSWORD" \
              --file SunceWallet.zip \
              --output-format xml > notarization_response.plist

            REQUEST_UUID=$(defaults read notarization_response.plist notarization-upload:RequestUUID)
            echo "Waiting for notarization to complete..."
            while true; do
              STATUS=$(xcrun altool --notarization-info "$REQUEST_UUID" --username "$APPLE_DEVELOPER_ID" --password "$APP_SPECIFIC_PASSWORD" | grep -i "Status:" | awk '{print $2}')
              if [[ "$STATUS" == "in" ]]; then
                sleep 30
              else
                echo "Notarization status: $STATUS"
                break
              fi
            done

        - name: Staple app
          if: matrix.os == 'macos-latest'
          run: |
            xcrun stapler staple "dist/mac/Sunce Wallet.app"
