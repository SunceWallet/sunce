name: Build and Release (Draft)

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build, Test and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

  build-app:
      strategy:
        fail-fast: false

        matrix:
          os: [ windows-latest, ubuntu-latest, macos-latest ]
#          os: [ macos-latest ]
          include:
            - os: windows-latest
              script: "build:win"
            - os: ubuntu-latest
              script: "build:linux"
            - os: macos-latest
              script: "build:mac"

      runs-on: ${{ matrix.os }}
      env:
        ELECTRON_ENABLE_LOGGING: true
      steps:
        - uses: actions/checkout@v4

        - name: setup node
          uses: actions/setup-node@v4
          with:
            node-version: 22

        - name: Setup
          run: npm ci

        - name: Tooling (Linux)
          if: matrix.os == 'ubuntu-latest'
          run: |
            sudo apt update
            sudo apt install snapd
            sudo snap install --classic snapcraft

        - name: Tooling (Win)
          if: matrix.os == 'windows-latest'
          run: |
            npm install -g win-node-env

#        - name: Test
#          run: npm test -- --no-watch --no-progress --browsers=ChromeHeadless
#          continue-on-error: true

        - name: Import Apple codesign certs
          if: matrix.os == 'macos-latest'
          uses: apple-actions/import-codesign-certs@v2
          with:
            p12-file-base64: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT_P12 }}
            p12-password: ${{ secrets.APPLE_CERT_P12_PASSWORD }}

        - name: Write App Store Connect API key (.p8)
          if: matrix.os == 'macos-latest'
          run: |
            KEY="$RUNNER_TEMP/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8"
            echo "${{ secrets.APPLE_API_KEY_P8 }}" | base64 --decode > "$KEY"
            chmod 600 "$KEY"
            echo "APPLE_API_KEY=$KEY" >> $GITHUB_ENV
            echo "APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }}" >> $GITHUB_ENV
            echo "APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}" >> $GITHUB_ENV

        - name: Build and Publish (macOS)
          if: matrix.os == 'macos-latest'
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#            APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
#            APPLE_ID: ${{ secrets.APPLE_USER }}
#            APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
#            APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
            APPLE_API_KEY: ${{ env.APPLE_API_KEY }}
            APPLE_API_KEY_ID: ${{ env.APPLE_API_KEY_ID }}
            APPLE_API_ISSUER: ${{ env.APPLE_API_ISSUER }}
#            DEBUG: "electron-builder,electron-osx-sign*,electron-notarize*,app-builder,macos-sign"
#            ELECTRON_BUILDER_DEBUG: "true"
#            DEBUG_COLORS: "false"
          run: |
            npm run build:mac -- -c.forceCodeSigning=true

        - name: Verify codesign (macOS)
          if: matrix.os == 'macos-latest'
          run: |
            APP="electron/dist/mac/Sunce Wallet.app"
            echo "Authority chain:" && codesign -dv --verbose=4 "$APP" 2>&1 | sed -n 's/^Authority=//p'
            echo "Verify deep:" && codesign --verify --deep --strict --verbose=2 "$APP"
            echo "BundleId:" && defaults read "$(pwd)/$APP/Contents/Info.plist" CFBundleIdentifier

        - name: Build and Publish (Other OS)
          if: matrix.os != 'macos-latest'
          run: npm run ${{ matrix.script }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Clean up keychain (macOS)
          if: matrix.os == 'macos-latest'
          run: |
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db