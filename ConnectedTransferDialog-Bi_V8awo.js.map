{"version":3,"mappings":";;;;AAiBA,MAAM,QAAQ,MAAM,KAAK,SAASA,OAAM,OAAmB;AACnD,UAAE,EAAE,IAAI,eAAe;AAE3B;AAAA,IAAC;AAAA;AAAA,MACC,OACG,kDACE,MAAM,SAAS,YAAY,EAAE,gCAAgC,IAAI,EAAE,mCAAmC,GAAG,KACzG,MAAM,QAAQ,UAAU,oCAAC,cAAa,SAAO,EAAE,YAAY,IAAK,KAAK,IACxE;AAAA,MAEF,QAAQ,MAAM;AAAA;AAAA,EAChB;AAEJ,CAAC;AAUD,SAAS,qBAAqB,OAAkC;AAC9D,QAAM,gBAAgB,YAAY;AAEhC;AAAA,IAAC;AAAA;AAAA,MACC,KACE,0DACG,6CAAM,SAAS,MAAM,SAAS,gBAAgB,MAAM,gBAAgB,MAAM,MAAM,MAAM,GACvF,oCAAC,MAAM,UAAN,EAAe,UAAW,sDAAa,EACtC,uCAAC,oBAAmB,WAAS,MAAM,SAAS,SAAO,KAAC,EACtD,CACF;AAAA,MAEF,SAAS,MAAM;AAAA;AAAA,IAEf,oCAAC,kBAAe,QAAO,QAAO,SAAS,gBAAgB,aAAa,WACjE,SAAM,QACT;AAAA,EACF;AAEJ;AAEA,+BAAe,MAAM,KAAK,oBAAoB;AC7C9C,MAAM,iBAAiB,MAAM,KAAK,MAAM,2BAAO,8BAAkB,oDAAC;AAElE,SAAS,wBAAwB,OAAkE;AACjG,QAAM,cAAc,mBAAmB,MAAM,QAAQ,WAAW,MAAM,QAAQ,OAAO;AAGnF,6CAAC,qBAAkB,SAAS,MAAM,WAC/B,CAAC,EAAE,SAAS,gBACX;AAAA,IAAC,MAAM;AAAA,IAAN;AAAA,MACC,UACE;AAAA,QAACC;AAAAA,QAAA;AAAA,UACC,SAAS,MAAM;AAAA,UACf,kBAAkB;AAAA,UAClB,gBAAgB,MAAM;AAAA,UACtB,MAAM,MAAM;AAAA;AAAA,QAEZ,oCAAC,aAAY,UAAQ,IAAK;AAAA;AAAA,IAC5B;AAAA,wCAGD,gBAAgB,KAAG,OAAO,aAA0B,SAAkB,gBAAkC;AAAA,GAG/G;AAEJ;AAEA,kCAAe,MAAM,KAAK,uBAAuB","names":["Title","TransferDialogLayout"],"ignoreList":[],"sources":["../src/TransferService/components/TransferDialogLayout.tsx","../src/TransferService/components/ConnectedTransferDialog.tsx"],"sourcesContent":["import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { useIsMobile, RefStateObject } from \"~Generic/hooks/userinterface\"\nimport ScrollableBalances from \"~Assets/components/ScrollableBalances\"\nimport DialogBody from \"~Layout/components/DialogBody\"\nimport TestnetBadge from \"~Generic/components/TestnetBadge\"\nimport InlineLoader from \"~Generic/components/InlineLoader\"\nimport { VerticalLayout } from \"~Layout/components/Box\"\nimport MainTitle from \"~Generic/components/MainTitle\"\n\ninterface TitleProps {\n  account: Account\n  onNavigateBack: () => void\n  type: \"deposit\" | \"withdrawal\"\n}\n\nconst Title = React.memo(function Title(props: TitleProps) {\n  const { t } = useTranslation()\n  return (\n    <MainTitle\n      title={\n        <span>\n          {props.type === \"deposit\" ? t(\"transfer-service.title.deposit\") : t(\"transfer-service.title.withdrawal\")}{\" \"}\n          {props.account.testnet ? <TestnetBadge style={{ marginLeft: 8 }} /> : null}\n        </span>\n      }\n      onBack={props.onNavigateBack}\n    />\n  )\n})\n\ninterface TransferDialogLayoutProps {\n  account: Account\n  children: React.ReactNode\n  dialogActionsRef: RefStateObject | undefined\n  onNavigateBack: () => void\n  type: \"deposit\" | \"withdrawal\"\n}\n\nfunction TransferDialogLayout(props: TransferDialogLayoutProps) {\n  const isSmallScreen = useIsMobile()\n  return (\n    <DialogBody\n      top={\n        <>\n          <Title account={props.account} onNavigateBack={props.onNavigateBack} type={props.type} />\n          <React.Suspense fallback={<InlineLoader />}>\n            <ScrollableBalances account={props.account} compact />\n          </React.Suspense>\n        </>\n      }\n      actions={props.dialogActionsRef}\n    >\n      <VerticalLayout height=\"100%\" padding={isSmallScreen ? \"16px 0px\" : \"16px 8px\"}>\n        {props.children}\n      </VerticalLayout>\n    </DialogBody>\n  )\n}\n\nexport default React.memo(TransferDialogLayout)\n","/*\n * We need to put this wrapper component in a module of its own and lazy-load the\n * actual dialog from here, so that we can show a loading animation in the\n * <TransferDialogLayout>.\n *\n * This is necessary since the TransferDialog bundle is pretty large and takes a\n * relatively long time to be parsed on older mobile devices.\n */\n\nimport React from \"react\"\nimport { useLiveAccountData } from \"~Generic/hooks/stellar-subscriptions\"\nimport TransactionSender from \"~Transaction/components/TransactionSender\"\nimport ViewLoading from \"~Generic/components/ViewLoading\"\nimport { TransferDialogProps } from \"./TransferDialog\"\nimport TransferDialogLayout from \"./TransferDialogLayout\"\n\nconst TransferDialog = React.lazy(() => import(\"./TransferDialog\"))\n\nfunction ConnectedTransferDialog(props: Pick<TransferDialogProps, \"account\" | \"onClose\" | \"type\">) {\n  const accountData = useLiveAccountData(props.account.accountID, props.account.testnet)\n\n  return (\n    <TransactionSender account={props.account}>\n      {({ horizon, sendTransaction }) => (\n        <React.Suspense\n          fallback={\n            <TransferDialogLayout\n              account={props.account}\n              dialogActionsRef={undefined}\n              onNavigateBack={props.onClose}\n              type={props.type}\n            >\n              <ViewLoading height={300} />\n            </TransferDialogLayout>\n          }\n        >\n          <TransferDialog {...props} accountData={accountData} horizon={horizon} sendTransaction={sendTransaction} />\n        </React.Suspense>\n      )}\n    </TransactionSender>\n  )\n}\n\nexport default React.memo(ConnectedTransferDialog)\n"],"file":"ConnectedTransferDialog-Bi_V8awo.js"}