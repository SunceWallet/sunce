{"version":3,"file":"TradingDialog-DttB019T.js","sources":["../src/Trading/components/MainActionSelection.tsx","../node_modules/@material-ui/icons/Gavel.js","../src/Generic/lib/orderbook.ts","../src/Trading/hooks/conversion.ts","../src/Trading/hooks/form.ts","../src/Trading/components/TradingPrice.tsx","../src/Trading/components/TradingForm.tsx","../src/Trading/components/TradingDialog.tsx"],"sourcesContent":["import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport RemoveIcon from \"@material-ui/icons/Remove\"\nimport MainSelectionButton from \"~Generic/components/MainSelectionButton\"\nimport { HorizontalLayout } from \"~Layout/components/Box\"\n\ninterface Props {\n  onSelectBuy: () => void\n  onSelectSell: () => void\n  style?: React.CSSProperties\n}\n\nconst MainActionSelection = React.forwardRef(function MainActionSelection(\n  props: Props,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const { t } = useTranslation()\n\n  return (\n    <HorizontalLayout ref={ref} justifyContent=\"space-evenly\" margin=\"48px 0 24px\" padding=\"0 8px\" wrap=\"wrap\">\n      <MainSelectionButton\n        label={t(\"trading.action-selection.buy.label\")}\n        description={t(\"trading.action-selection.buy.description\")}\n        gutterBottom\n        onClick={props.onSelectBuy}\n        Icon={AddIcon}\n      />\n      <MainSelectionButton\n        label={t(\"trading.action-selection.sell.label\")}\n        description={t(\"trading.action-selection.sell.description\")}\n        gutterBottom\n        onClick={props.onSelectSell}\n        Icon={RemoveIcon}\n      />\n    </HorizontalLayout>\n  )\n})\n\nexport default React.memo(MainActionSelection)\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"defs\", null, _react.default.createElement(\"path\", {\n  id: \"a\",\n  d: \"M0 0h24v24H0V0z\"\n})), _react.default.createElement(\"path\", {\n  d: \"M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z\"\n})), 'Gavel');\n\nexports.default = _default;","import { Asset } from \"@stellar/stellar-sdk\"\n\n/*\n * Quick orderbook cheat sheet:\n *\n * Consider a trading pair T (buy=asset_x, sell=asset_y).\n * The inverse would be T'(buy=asset_y, sell=asset_x).\n *\n * asks(T) === bids(T').map(offer => ({ ...offer, price = 1 / offer.price }))\n * asks(T') === bids(T).map(offer => ({ ...offer, price = 1 / offer.price }))\n *\n * Since the asks & bids are ordered from closest to last trade price to furthest when\n * returned by horizon server, the order of asks(T) & bids(T') is the same as well.\n */\n\n// @types/stellar-sdk types seem wrong\nexport interface FixedOrderbookOffer {\n  price_r: {\n    n: number\n    d: number\n  }\n  price: string\n  amount: string\n}\n\n// @types/stellar-sdk types seem wrong\nexport interface FixedOrderbookRecord {\n  asks: FixedOrderbookOffer[]\n  bids: FixedOrderbookOffer[]\n  base: Asset\n  counter: Asset\n}\n\nexport function calculateSpread(asks: FixedOrderbookOffer[], bids: FixedOrderbookOffer[]) {\n  // TODO: Calculate according to trade volume (because larger volumes will likely lead to larger spreads)\n\n  if (asks.length === 0 || bids.length === 0) {\n    return {\n      absoluteSpread: 0,\n      relativeSpread: 0\n    }\n  }\n\n  const absoluteSpread = Number.parseFloat(asks[0].price) - Number.parseFloat(bids[0].price)\n  const relativeSpread = absoluteSpread / Math.min(Number.parseFloat(asks[0].price), Number.parseFloat(bids[0].price))\n  return {\n    absoluteSpread,\n    relativeSpread\n  }\n}\n","import BigNumber from \"big.js\"\nimport React from \"react\"\nimport { FixedOrderbookOffer } from \"~Generic/lib/orderbook\"\n\nconst sum = (numbers: BigNumber[]) => numbers.reduce((total, no) => total.add(no), BigNumber(0))\n\nexport function useConversionOffers(\n  offers: FixedOrderbookOffer[],\n  amount: BigNumber,\n  invertOfferAmounts: boolean = false\n) {\n  // Best offers always returned first by horizon\n  const bestOffers = invertOfferAmounts\n    ? offers.map(offer => ({\n        ...offer,\n        amount: BigNumber(offer.price).eq(0)\n          ? BigNumber(0).toFixed(7)\n          : BigNumber(offer.amount)\n              .div(offer.price)\n              .toFixed(7)\n      }))\n    : offers\n\n  const bestMatches = React.useMemo(() => {\n    const offersToCover: FixedOrderbookOffer[] = []\n    let volume = BigNumber(0)\n\n    for (const matchingOffer of bestOffers) {\n      if (volume.gte(amount)) {\n        break\n      }\n      if (!BigNumber(matchingOffer.price).eq(0)) {\n        offersToCover.push(matchingOffer)\n        volume = volume.add(matchingOffer.amount)\n      }\n    }\n\n    return {\n      offers: offersToCover,\n      volume\n    }\n  }, [bestOffers, amount])\n\n  const bestPrices = bestMatches.offers.map(offer => BigNumber(offer.price))\n  const worstPriceOfBestMatches = bestPrices.length > 0 ? bestPrices[bestPrices.length - 1] : undefined\n\n  const firstBestOffers = bestMatches.offers.slice(0, -1)\n  const lastBestOffer = bestMatches.offers[bestMatches.offers.length - 1]\n\n  const estimatedReturn = sum([\n    ...firstBestOffers.slice(0, -1).map(offer => BigNumber(offer.amount).mul(offer.price)),\n    lastBestOffer\n      ? BigNumber(lastBestOffer.price).mul(BigNumber(lastBestOffer.amount).sub(bestMatches.volume.sub(amount)))\n      : BigNumber(0)\n  ])\n\n  return {\n    estimatedReturn,\n    worstPriceOfBestMatches\n  }\n}\n","import BigNumber from \"big.js\"\nimport { Asset, Horizon } from \"@stellar/stellar-sdk\"\nimport { AccountData, BalanceLine } from \"~Generic/lib/account\"\nimport { formatBalance, BalanceFormattingOptions } from \"~Generic/lib/balances\"\nimport { FormBigNumber, isValidAmount } from \"~Generic/lib/form\"\nimport { calculateSpread, FixedOrderbookRecord } from \"~Generic/lib/orderbook\"\nimport {\n  BASE_RESERVE,\n  findMatchingBalanceLine,\n  getAccountMinimumBalance,\n  getSpendableBalance\n} from \"~Generic/lib/stellar\"\nimport { useConversionOffers } from \"./conversion\"\n\nexport const bigNumberToInputValue = (bignum: BigNumber, overrides?: BalanceFormattingOptions) =>\n  formatBalance(bignum, { minimumSignificants: 3, maximumSignificants: 9, groupThousands: false, ...overrides })\n\nfunction getSpendableBalanceWithoutBaseReserve(accountMinimumBalance: BigNumber, balanceLine: BalanceLine) {\n  const spendableBalance = getSpendableBalance(accountMinimumBalance, balanceLine).minus(\n    // subtract base-reserve when asset_type is native because placing a new order requires 1 * base-reserve XLM\n    BigNumber(balanceLine.asset_type === \"native\" ? BASE_RESERVE : BigNumber(0))\n  )\n\n  // return 0 if calculated balance is negative\n  return spendableBalance.cmp(BigNumber(0)) < 0 ? BigNumber(0) : spendableBalance\n}\n\nexport interface TradingFormValues {\n  primaryAsset: Asset | undefined\n  primaryAmountString: string\n  secondaryAsset: Asset\n  manualPrice: string\n}\n\ninterface CalculationParameters {\n  accountData: AccountData\n  priceMode: \"primary\" | \"secondary\"\n  primaryAction: \"buy\" | \"sell\"\n  tradePair: FixedOrderbookRecord\n  values: TradingFormValues\n}\n\ninterface CalculationResults {\n  defaultPrice: string\n  effectivePrice: BigNumber\n  maxPrimaryAmount: BigNumber\n  minAccountBalance: BigNumber\n  primaryAmount: BigNumber\n  primaryBalance: Horizon.BalanceLine | undefined\n  relativeSpread: number\n  secondaryAmount: BigNumber\n  secondaryBalance: Horizon.BalanceLine | undefined\n  spendablePrimaryBalance: BigNumber\n  spendableSecondaryBalance: BigNumber\n}\n\nexport function useCalculation(parameters: CalculationParameters): CalculationResults {\n  const { accountData, priceMode, primaryAction, tradePair } = parameters\n  const { manualPrice, primaryAmountString, primaryAsset, secondaryAsset } = parameters.values\n\n  const price =\n    manualPrice && isValidAmount(manualPrice)\n      ? priceMode === \"secondary\"\n        ? FormBigNumber(manualPrice)\n        : FormBigNumber(manualPrice).eq(0) // prevent division by zero\n        ? BigNumber(0)\n        : BigNumber(1).div(FormBigNumber(manualPrice))\n      : BigNumber(0)\n\n  const primaryAmount =\n    primaryAmountString && isValidAmount(primaryAmountString) ? FormBigNumber(primaryAmountString) : BigNumber(0)\n\n  const primaryBalance = primaryAsset ? findMatchingBalanceLine(accountData.balances, primaryAsset) : undefined\n  const secondaryBalance = secondaryAsset ? findMatchingBalanceLine(accountData.balances, secondaryAsset) : undefined\n\n  const { worstPriceOfBestMatches } = useConversionOffers(\n    primaryAction === \"buy\" ? tradePair.asks : tradePair.bids,\n    primaryAmount.gt(0) ? primaryAmount : BigNumber(0.01),\n    primaryAction === \"sell\"\n  )\n\n  const { relativeSpread } = calculateSpread(tradePair.asks, tradePair.bids)\n  const bestPrice = worstPriceOfBestMatches && worstPriceOfBestMatches.gt(0) ? worstPriceOfBestMatches : undefined\n  const effectivePrice = price.gt(0) ? price : bestPrice || BigNumber(0)\n  const secondaryAmount = primaryAmount.mul(effectivePrice)\n\n  // prevent division by zero\n  const inversePrice = effectivePrice.eq(0) ? BigNumber(0) : BigNumber(1).div(effectivePrice)\n  const defaultPrice = bigNumberToInputValue(priceMode === \"secondary\" ? effectivePrice : inversePrice)\n\n  const minAccountBalance = getAccountMinimumBalance(accountData)\n\n  const spendablePrimaryBalance = primaryBalance\n    ? primaryAction === \"sell\"\n      ? getSpendableBalanceWithoutBaseReserve(minAccountBalance, primaryBalance)\n      : getSpendableBalance(minAccountBalance, primaryBalance)\n    : BigNumber(0)\n\n  const spendableSecondaryBalance = secondaryBalance\n    ? primaryAction === \"buy\"\n      ? getSpendableBalanceWithoutBaseReserve(minAccountBalance, secondaryBalance)\n      : getSpendableBalance(minAccountBalance, secondaryBalance)\n    : BigNumber(0)\n\n  const maxPrimaryAmount =\n    primaryAction === \"buy\"\n      ? spendableSecondaryBalance.gt(0) && effectivePrice.gt(0)\n        ? BigNumber(spendableSecondaryBalance).div(effectivePrice)\n        : BigNumber(0)\n      : spendablePrimaryBalance.gt(0)\n      ? BigNumber(spendablePrimaryBalance)\n      : BigNumber(0)\n\n  return {\n    defaultPrice,\n    effectivePrice,\n    maxPrimaryAmount,\n    minAccountBalance,\n    primaryAmount,\n    primaryBalance,\n    relativeSpread,\n    secondaryAmount,\n    secondaryBalance,\n    spendablePrimaryBalance,\n    spendableSecondaryBalance\n  }\n}\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset } from \"@stellar/stellar-sdk\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Select from \"@material-ui/core/Select\"\nimport TextField from \"@material-ui/core/TextField\"\n\ninterface TradingPriceProps {\n  defaultPrice?: string\n  inputError?: string\n  manualPrice?: string\n  onBlur?: () => void\n  onChange?: (event: React.ChangeEvent) => void\n  onSetPriceDenotedIn: (denotedIn: \"primary\" | \"secondary\") => void\n  priceDenotedIn: \"primary\" | \"secondary\"\n  primaryAsset: Asset | undefined\n  secondaryAsset: Asset | undefined\n  selectOnFocus?: boolean\n  style?: React.CSSProperties\n}\n\nconst TradingPrice = React.forwardRef(function TradingPrice(props: TradingPriceProps, ref: React.Ref<HTMLDivElement>) {\n  const isDisabled = !props.primaryAsset || !props.secondaryAsset\n  const { t } = useTranslation()\n\n  const priceUnit = props.priceDenotedIn === \"primary\" ? props.secondaryAsset?.getCode() : props.primaryAsset?.getCode()\n\n  const label = priceUnit\n    ? t(\"trading.trading-price.label\", { unit: priceUnit })\n    : t(\"trading.trading-price.default-label\")\n\n  const endAdornment = (\n    <InputAdornment position=\"end\">\n      <Select\n        disabled={isDisabled}\n        disableUnderline\n        onChange={event => props.onSetPriceDenotedIn(event.target.value as any)}\n        style={{ fontWeight: 400 }}\n        value={props.priceDenotedIn}\n      >\n        <MenuItem selected={props.priceDenotedIn === \"secondary\"} value=\"secondary\">\n          {props.secondaryAsset ? props.secondaryAsset.getCode() : \"\"}\n        </MenuItem>\n        <MenuItem selected={props.priceDenotedIn === \"primary\"} value=\"primary\">\n          {props.primaryAsset ? props.primaryAsset.getCode() : \"\"}\n        </MenuItem>\n      </Select>\n    </InputAdornment>\n  )\n\n  return (\n    <TextField\n      inputProps={{\n        pattern: \"^[0-9]*(.[0-9]+)?$\",\n        inputMode: \"decimal\",\n        min: \"0.0000001\"\n      }}\n      InputProps={{ endAdornment }}\n      inputRef={ref}\n      error={Boolean(props.inputError)}\n      label={props.inputError || label}\n      onBlur={props.onBlur}\n      onChange={props.onChange}\n      onFocus={props.selectOnFocus ? event => event.target.select() : undefined}\n      style={props.style}\n      value={props.defaultPrice ? props.defaultPrice : props.manualPrice}\n    />\n  )\n})\n\nexport default React.memo(TradingPrice)\n","import React from \"react\"\nimport { Controller, useForm } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset, Horizon, Operation, Transaction } from \"@stellar/stellar-sdk\"\nimport Button from \"@material-ui/core/Button\"\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Typography from \"@material-ui/core/Typography\"\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport GavelIcon from \"@material-ui/icons/Gavel\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { trackError } from \"~App/contexts/notifications\"\nimport { warningColor } from \"~App/theme\"\nimport AssetSelector from \"~Generic/components/AssetSelector\"\nimport { ActionButton, DialogActionsBox } from \"~Generic/components/DialogActions\"\nimport { ReadOnlyTextfield } from \"~Generic/components/FormFields\"\nimport Portal from \"~Generic/components/Portal\"\nimport { useHorizon } from \"~Generic/hooks/stellar\"\nimport { useLiveOrderbook } from \"~Generic/hooks/stellar-subscriptions\"\nimport { RefStateObject, useIsMobile } from \"~Generic/hooks/userinterface\"\nimport { AccountData } from \"~Generic/lib/account\"\nimport { CustomError } from \"~Generic/lib/errors\"\nimport {\n  balancelineToAsset,\n  findMatchingBalanceLine,\n  getAccountMinimumBalance,\n  getSpendableBalance\n} from \"~Generic/lib/stellar\"\nimport { FormBigNumber, isValidAmount } from \"~Generic/lib/form\"\nimport { createTransaction } from \"~Generic/lib/transaction\"\nimport { Box, HorizontalLayout, VerticalLayout } from \"~Layout/components/Box\"\nimport { bigNumberToInputValue, TradingFormValues, useCalculation } from \"../hooks/form\"\nimport TradingPrice from \"./TradingPrice\"\n\nconst useStyles = makeStyles({\n  expansionPanel: {\n    background: \"transparent\",\n    margin: \"8px 0 !important\",\n\n    \"&:before\": {\n      background: \"transparent\"\n    }\n  },\n  expansionPanelSummary: {\n    justifyContent: \"flex-start\",\n    minHeight: \"48px !important\",\n    padding: 0\n  },\n  expansionPanelSummaryContent: {\n    flexGrow: 0,\n    marginTop: \"0 !important\",\n    marginBottom: \"0 !important\"\n  },\n  expansionPanelDetails: {\n    justifyContent: \"flex-start\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingTop: 12\n  }\n})\n\ninterface Props {\n  account: Account\n  accountData: AccountData\n  className?: string\n  dialogActionsRef: RefStateObject | null\n  initialPrimaryAsset?: Asset\n  primaryAction: \"buy\" | \"sell\"\n  sendTransaction: (transaction: Transaction) => void\n  style?: React.CSSProperties\n  trustlines: Horizon.BalanceLineAsset[]\n}\n\nfunction TradingForm(props: Props) {\n  const classes = useStyles()\n  const isSmallScreen = useIsMobile()\n  const isSmallHeightScreen = useMediaQuery(\"(max-height: 500px)\")\n  const isSmallScreenXY = isSmallScreen || isSmallHeightScreen\n  const { t } = useTranslation()\n\n  const [expanded, setExpanded] = React.useState(false)\n  const [priceMode, setPriceMode] = React.useState<\"primary\" | \"secondary\">(\"secondary\")\n  const [pending, setPending] = React.useState(false)\n\n  const form = useForm<TradingFormValues>({\n    defaultValues: {\n      primaryAsset: props.initialPrimaryAsset,\n      primaryAmountString: \"\",\n      secondaryAsset: Asset.native(),\n      manualPrice: \"0\"\n    }\n  })\n\n  const sendTransaction = props.sendTransaction\n  const { primaryAsset, secondaryAsset, manualPrice } = form.watch()\n\n  React.useEffect(() => {\n    if (!primaryAsset && props.initialPrimaryAsset) {\n      form.setValue(\"primaryAsset\", props.initialPrimaryAsset)\n    }\n  }, [form, primaryAsset, props.initialPrimaryAsset])\n\n  const horizon = useHorizon(props.account.testnet)\n  const tradePair = useLiveOrderbook(primaryAsset || Asset.native(), secondaryAsset, props.account.testnet)\n\n  const assets = React.useMemo(() => props.trustlines.map(balancelineToAsset), [props.trustlines])\n\n  const calculation = useCalculation({\n    accountData: props.accountData,\n    priceMode,\n    primaryAction: props.primaryAction,\n    tradePair,\n    values: form.getValues()\n  })\n\n  const {\n    maxPrimaryAmount,\n    primaryBalance,\n    defaultPrice,\n    effectivePrice,\n    primaryAmount,\n    relativeSpread,\n    secondaryAmount,\n    secondaryBalance,\n    spendablePrimaryBalance,\n    spendableSecondaryBalance\n  } = calculation\n\n  if (form.formState.touched.primaryAmountString) {\n    // trigger delayed validation to make sure that primaryAmountString is validated with latest calculation results\n    setTimeout(() => form.triggerValidation(\"primaryAmountString\"), 0)\n  }\n\n  const setPrimaryAmountToMax = () => {\n    form.setValue(\"primaryAmountString\", maxPrimaryAmount.toFixed(7))\n  }\n\n  const validateManualPrice = React.useCallback(() => {\n    const value = FormBigNumber(manualPrice).gt(0) ? manualPrice : defaultPrice\n    const valid = isValidAmount(value) && FormBigNumber(value).gt(0)\n    if (!valid) {\n      if (!expanded) {\n        setExpanded(true)\n      }\n      return t<string>(\"trading.validation.invalid-price\")\n    }\n  }, [defaultPrice, expanded, manualPrice, t])\n\n  const submitForm = React.useCallback(async () => {\n    try {\n      setPending(true)\n\n      const error = validateManualPrice()\n      if (error) {\n        form.setError(\"manualPrice\", \"invalid-amount\", error)\n        return\n      }\n\n      if (!primaryAsset) {\n        throw CustomError(\n          \"InvariantViolationError\",\n          \"Invariant violation: Should not be able to submit form without having selected the primary asset.\",\n          { message: \"Should not be able to submit form without having selected the primary asset.\" }\n        )\n      }\n\n      const spendableXLMBalance = getSpendableBalance(\n        getAccountMinimumBalance(props.accountData),\n        findMatchingBalanceLine(props.accountData.balances, Asset.native())\n      )\n      if (spendableXLMBalance.minus(0.5).cmp(0) <= 0) {\n        throw CustomError(\"LowReserveOrderError\", \"Cannot place order because spendable XLM balance is too low.\")\n      }\n\n      const tx = await createTransaction(\n        [\n          props.primaryAction === \"buy\"\n            ? Operation.manageBuyOffer({\n                buyAmount: primaryAmount.toFixed(7),\n                buying: primaryAsset,\n                offerId: 0,\n                price: effectivePrice.toFixed(7),\n                selling: secondaryAsset,\n                withMuxing: true\n              })\n            : Operation.manageSellOffer({\n                amount: primaryAmount.toFixed(7),\n                buying: secondaryAsset,\n                offerId: 0,\n                price: effectivePrice.toFixed(7),\n                selling: primaryAsset,\n                withMuxing: true\n              })\n        ],\n        {\n          accountData: props.accountData,\n          horizon,\n          walletAccount: props.account\n        }\n      )\n      await sendTransaction(tx)\n    } catch (error) {\n      trackError(error)\n    } finally {\n      setPending(false)\n    }\n  }, [\n    form,\n    effectivePrice,\n    horizon,\n    primaryAsset,\n    props.account,\n    props.accountData,\n    props.primaryAction,\n    primaryAmount,\n    secondaryAsset,\n    sendTransaction,\n    validateManualPrice\n  ])\n\n  return (\n    // set minHeight to prevent wrapping of layout when keyboard is shown\n    <VerticalLayout\n      alignItems=\"stretch\"\n      alignSelf={isSmallScreenXY ? undefined : \"center\"}\n      grow={1}\n      minHeight={300}\n      maxHeight=\"100%\"\n      margin={isSmallScreen ? undefined : \"32px 0 0\"}\n      padding=\"16px 0\"\n      shrink={1}\n      width=\"100%\"\n    >\n      <VerticalLayout\n        alignItems=\"stretch\"\n        alignSelf={isSmallScreen ? \"stretch\" : \"center\"}\n        minWidth={isSmallScreen ? \"75%\" : 450}\n        maxWidth={isSmallScreen ? \"100%\" : 500}\n        padding=\"0 2px\"\n        shrink={0}\n        width=\"100%\"\n      >\n        <HorizontalLayout margin=\"8px 0\">\n          <Controller\n            as={\n              <AssetSelector\n                assets={assets}\n                inputError={form.errors.primaryAsset && form.errors.primaryAsset.message}\n                label={\n                  props.primaryAction === \"buy\"\n                    ? t(\"trading.inputs.primary-asset-selector.label.buy\")\n                    : t(\"trading.inputs.primary-asset-selector.label.sell\")\n                }\n                minWidth={75}\n                showXLM\n                style={{ flexGrow: 1, marginRight: 24, maxWidth: 150, width: \"25%\" }}\n                testnet={props.account.testnet}\n                value={primaryAsset}\n              />\n            }\n            control={form.control}\n            name=\"primaryAsset\"\n            rules={{\n              required: t<string>(\"trading.validation.primary-asset-missing\")\n            }}\n          />\n          <TextField\n            name=\"primaryAmountString\"\n            inputRef={form.register({\n              required: t<string>(\"trading.validation.primary-amount-missing\"),\n              validate: value => {\n                const amountInvalid = primaryAmount.lt(0) || (value.length > 0 && primaryAmount.eq(0))\n                const exceedsBalance =\n                  (props.primaryAction === \"sell\" && primaryBalance && primaryAmount.gt(spendablePrimaryBalance)) ||\n                  (props.primaryAction === \"buy\" && secondaryBalance && secondaryAmount.gt(spendableSecondaryBalance))\n\n                if (amountInvalid) {\n                  return t<string>(\"trading.validation.invalid-amount\")\n                } else if (exceedsBalance) {\n                  return t<string>(\"trading.validation.not-enough-balance\")\n                } else {\n                  return true\n                }\n              }\n            })}\n            error={Boolean(form.errors.primaryAmountString)}\n            inputProps={{\n              pattern: \"^[0-9]*(.[0-9]+)?$\",\n              inputMode: \"decimal\",\n              min: \"0.0000001\",\n              max: maxPrimaryAmount.toFixed(7),\n              style: { height: 27 }\n            }}\n            InputProps={{\n              endAdornment:\n                props.primaryAction === \"buy\" ? (\n                  undefined\n                ) : (\n                  <InputAdornment position=\"end\">\n                    <Button\n                      disabled={!primaryAsset || !primaryBalance}\n                      onClick={setPrimaryAmountToMax}\n                      style={{ boxShadow: \"none\", fontWeight: 400 }}\n                    >\n                      {t(\"trading.inputs.primary-amount.max-button.label\")}\n                    </Button>\n                  </InputAdornment>\n                )\n            }}\n            label={\n              form.errors.primaryAmountString && form.errors.primaryAmountString.message\n                ? form.errors.primaryAmountString.message\n                : props.primaryAction === \"buy\"\n                ? t(\"trading.inputs.primary-amount.label.buy\")\n                : t(\"trading.inputs.primary-amount.label.sell\")\n            }\n            placeholder={t(\n              \"trading.inputs.primary-amount.placeholder\",\n              `Max. ${bigNumberToInputValue(maxPrimaryAmount)}`,\n              {\n                amount: bigNumberToInputValue(maxPrimaryAmount)\n              }\n            )}\n            required\n            style={{ flexGrow: 1, flexShrink: 1, width: \"55%\" }}\n          />\n        </HorizontalLayout>\n        <HorizontalLayout margin=\"8px 0 32px\">\n          <Controller\n            as={\n              <AssetSelector\n                assets={assets}\n                label={\n                  props.primaryAction === \"buy\"\n                    ? t(\"trading.inputs.secondary-asset-selector.label.buy\")\n                    : t(\"trading.inputs.secondary-asset-selector.label.sell\")\n                }\n                minWidth={75}\n                showXLM\n                style={{ flexGrow: 1, marginRight: 24, maxWidth: 150, width: \"25%\" }}\n                testnet={props.account.testnet}\n                value={secondaryAsset}\n              />\n            }\n            control={form.control}\n            name=\"secondaryAsset\"\n            rules={{ required: t<string>(\"trading.validation.secondary-asset-missing\") }}\n          />\n          <ReadOnlyTextfield\n            disableUnderline\n            inputProps={{\n              style: { height: 27 }\n            }}\n            label={\n              props.primaryAction === \"buy\"\n                ? t(\"trading.inputs.estimated-costs.label.buy\")\n                : t(\"trading.inputs.estimated-costs.label.sell\")\n            }\n            placeholder={`Max. ${secondaryBalance ? secondaryBalance.balance : \"0\"}`}\n            style={{ flexGrow: 1, flexShrink: 1, width: \"55%\" }}\n            inputMode=\"decimal\"\n            type=\"number\"\n            value={\n              // Format amount without thousands grouping, since it may lead to illegal number input values (#831)\n              bigNumberToInputValue(secondaryAmount, { groupThousands: false })\n            }\n          />\n        </HorizontalLayout>\n        <ExpansionPanel\n          className={classes.expansionPanel}\n          elevation={0}\n          expanded={expanded}\n          onChange={() => setExpanded(!expanded)}\n        >\n          <ExpansionPanelSummary\n            classes={{ root: classes.expansionPanelSummary, content: classes.expansionPanelSummaryContent }}\n            expandIcon={<ExpandMoreIcon />}\n          >\n            <Typography align=\"center\" style={{ flexGrow: 1 }}>\n              {t(\"trading.advanced.header\")}\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n            <Controller\n              as={\n                <TradingPrice\n                  defaultPrice={!form.formState.touched.manualPrice ? defaultPrice : undefined}\n                  inputError={form.errors.manualPrice && form.errors.manualPrice.message}\n                  onSetPriceDenotedIn={setPriceMode}\n                  priceDenotedIn={priceMode}\n                  primaryAsset={primaryAsset}\n                  secondaryAsset={secondaryAsset}\n                  selectOnFocus\n                  style={{ flexGrow: 1, maxWidth: 250, width: \"55%\" }}\n                />\n              }\n              control={form.control}\n              name=\"manualPrice\"\n              rules={{\n                validate: value => {\n                  const valid = isValidAmount(value)\n                  return valid || t<string>(\"trading.validation.invalid-price\")\n                }\n              }}\n              valueName=\"manualPrice\"\n            />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        {relativeSpread >= 0.015 ? (\n          <Box margin=\"32px 0 0\" padding=\"8px 12px\" style={{ background: warningColor }}>\n            <b>{t(\"trading.warning.title\")}</b>\n            <br />\n            {t(\n              \"trading.warning.message\",\n              `The spread between buying and selling price is about ${(relativeSpread * 100).toFixed(1)}%.`,\n              { spread: (relativeSpread * 100).toFixed(1) }\n            )}\n          </Box>\n        ) : null}\n        <Portal target={props.dialogActionsRef?.element}>\n          <DialogActionsBox desktopStyle={{ marginTop: 32 }}>\n            <ActionButton loading={pending} icon={<GavelIcon />} onClick={form.handleSubmit(submitForm)} type=\"primary\">\n              {t(\"trading.action.submit\")}\n            </ActionButton>\n          </DialogActionsBox>\n        </Portal>\n      </VerticalLayout>\n    </VerticalLayout>\n  )\n}\n\nexport default React.memo(TradingForm)\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset, Horizon, Transaction } from \"@stellar/stellar-sdk\"\nimport Box from \"@material-ui/core/Box\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { Account } from \"~App/contexts/accounts\"\nimport * as routes from \"~App/routes\"\nimport { ActionButton, DialogActionsBox } from \"~Generic/components/DialogActions\"\nimport { InlineErrorBoundary } from \"~Generic/components/ErrorBoundaries\"\nimport MainTitle from \"~Generic/components/MainTitle\"\nimport Portal from \"~Generic/components/Portal\"\nimport ScrollableBalances from \"~Generic/components/ScrollableBalances\"\nimport TestnetBadge from \"~Generic/components/TestnetBadge\"\nimport ViewLoading from \"~Generic/components/ViewLoading\"\nimport { useLiveAccountData } from \"~Generic/hooks/stellar-subscriptions\"\nimport { useDialogActions, useRouter } from \"~Generic/hooks/userinterface\"\nimport { matchesRoute } from \"~Generic/lib/routes\"\nimport { parseAssetID, stringifyAsset } from \"~Generic/lib/stellar\"\nimport { getLastArgumentFromURL } from \"~Generic/lib/url\"\nimport Carousel from \"~Layout/components/Carousel\"\nimport DialogBody from \"~Layout/components/DialogBody\"\nimport TransactionSender from \"~Transaction/components/TransactionSender\"\nimport MainActionSelection from \"./MainActionSelection\"\nimport TradingForm from \"./TradingForm\"\n\ninterface TradingDialogProps {\n  account: Account\n  horizon: Horizon.Server\n  onClose: () => void\n  sendTransaction: (transaction: Transaction) => void\n}\n\nfunction getAssetFromPath(pathname: string) {\n  if (matchesRoute(pathname, routes.tradeAsset(\"*\", undefined, \"*\"))) {\n    const lastArgument = getLastArgumentFromURL(pathname)\n    if (lastArgument !== \"buy\" && lastArgument !== \"sell\") {\n      return parseAssetID(lastArgument)\n    }\n  }\n  return undefined\n}\n\nfunction TradingDialog(props: TradingDialogProps) {\n  const accountData = useLiveAccountData(props.account.accountID, props.account.testnet)\n  const dialogActionsRef = useDialogActions()\n  const router = useRouter()\n  const [preselectedAsset, setPreselectedAsset] = React.useState<Asset | undefined>()\n  const { t } = useTranslation()\n\n  React.useEffect(() => {\n    const asset = getAssetFromPath(router.location.pathname)\n    setPreselectedAsset(asset)\n  }, [router.location.pathname])\n\n  const trustlines = React.useMemo(\n    () =>\n      accountData.balances.filter((balance): balance is Horizon.BalanceLineAsset => balance.asset_type !== \"native\"),\n    [accountData.balances]\n  )\n\n  const primaryAction: \"buy\" | \"sell\" | undefined = matchesRoute(\n    router.location.pathname,\n    routes.tradeAsset(\"*\", \"buy\")\n  )\n    ? \"buy\"\n    : matchesRoute(router.location.pathname, routes.tradeAsset(\"*\", \"sell\"))\n    ? \"sell\"\n    : undefined\n\n  const clearPrimaryAction = React.useCallback(() => {\n    router.history.push(\n      routes.tradeAsset(props.account.id, undefined, preselectedAsset ? stringifyAsset(preselectedAsset) : undefined)\n    )\n  }, [preselectedAsset, props.account, router.history])\n\n  const selectPrimaryAction = React.useCallback(\n    (mainAction: \"buy\" | \"sell\") => {\n      router.history.push(\n        routes.tradeAsset(props.account.id, mainAction, preselectedAsset ? stringifyAsset(preselectedAsset) : undefined)\n      )\n    },\n    [preselectedAsset, props.account, router.history]\n  )\n\n  const MainContent = React.useMemo(\n    () => (\n      <Carousel current={primaryAction ? 1 : 0}>\n        <MainActionSelection\n          onSelectBuy={() => selectPrimaryAction(\"buy\")}\n          onSelectSell={() => selectPrimaryAction(\"sell\")}\n        />\n        <React.Suspense fallback={<ViewLoading />}>\n          <TradingForm\n            account={props.account}\n            accountData={accountData}\n            dialogActionsRef={primaryAction ? dialogActionsRef : null}\n            initialPrimaryAsset={preselectedAsset}\n            primaryAction={primaryAction || \"buy\"}\n            sendTransaction={props.sendTransaction}\n            trustlines={trustlines}\n          />\n        </React.Suspense>\n      </Carousel>\n    ),\n    [\n      accountData,\n      dialogActionsRef,\n      preselectedAsset,\n      primaryAction,\n      props.account,\n      props.sendTransaction,\n      selectPrimaryAction,\n      trustlines\n    ]\n  )\n\n  const LinkToManageAssets = React.useMemo(\n    () => (\n      <Box margin=\"32px 0 0\" textAlign=\"center\">\n        <Typography>{t(\"trading.no-assets-info\")}</Typography>\n        <Portal target={dialogActionsRef.element}>\n          <DialogActionsBox>\n            <ActionButton\n              autoFocus\n              onClick={() => router.history.push(routes.manageAccountAssets(props.account.id))}\n              type=\"primary\"\n            >\n              {t(\"trading.action.add-asset\")}\n            </ActionButton>\n          </DialogActionsBox>\n        </Portal>\n      </Box>\n    ),\n    [dialogActionsRef, props.account, router, t]\n  )\n\n  return (\n    <DialogBody\n      top={\n        <>\n          <MainTitle\n            title={\n              <span>\n                {t(\"trading.title\")}\n                {props.account.testnet ? <TestnetBadge style={{ marginLeft: 8 }} /> : null}\n              </span>\n            }\n            onBack={primaryAction ? clearPrimaryAction : props.onClose}\n          />\n          <ScrollableBalances account={props.account} compact />\n        </>\n      }\n      actions={dialogActionsRef}\n    >\n      <InlineErrorBoundary>{trustlines.length > 0 ? MainContent : LinkToManageAssets}</InlineErrorBoundary>\n    </DialogBody>\n  )\n}\n\nfunction TradingDialogContainer(props: Pick<TradingDialogProps, \"account\" | \"onClose\">) {\n  const router = useRouter()\n  const navigateToAccount = () => router.history.push(routes.account(props.account.id))\n\n  return (\n    <TransactionSender account={props.account} onSubmissionCompleted={navigateToAccount}>\n      {txContext => <TradingDialog {...props} {...txContext} />}\n    </TransactionSender>\n  )\n}\n\nexport default TradingDialogContainer\n"],"names":["MainActionSelection","React","props","ref","t","useTranslation","HorizontalLayout","MainSelectionButton","AddIcon","RemoveIcon","MainActionSelection$1","_interopRequireDefault","require$$0","Gavel","_react","require$$1","_createSvgIcon","_default","calculateSpread","asks","bids","absoluteSpread","relativeSpread","sum","numbers","total","no","BigNumber","useConversionOffers","offers","amount","invertOfferAmounts","bestOffers","offer","bestMatches","offersToCover","volume","matchingOffer","bestPrices","worstPriceOfBestMatches","firstBestOffers","lastBestOffer","bigNumberToInputValue","bignum","overrides","formatBalance","getSpendableBalanceWithoutBaseReserve","accountMinimumBalance","balanceLine","spendableBalance","getSpendableBalance","BASE_RESERVE","useCalculation","parameters","accountData","priceMode","primaryAction","tradePair","manualPrice","primaryAmountString","primaryAsset","secondaryAsset","price","isValidAmount","FormBigNumber","primaryAmount","primaryBalance","findMatchingBalanceLine","secondaryBalance","bestPrice","effectivePrice","secondaryAmount","inversePrice","defaultPrice","minAccountBalance","getAccountMinimumBalance","spendablePrimaryBalance","spendableSecondaryBalance","maxPrimaryAmount","TradingPrice","isDisabled","priceUnit","_a","_b","label","endAdornment","InputAdornment","Select","event","MenuItem","TextField","TradingPrice$1","useStyles","makeStyles","TradingForm","classes","isSmallScreen","useIsMobile","isSmallHeightScreen","useMediaQuery","isSmallScreenXY","expanded","setExpanded","setPriceMode","pending","setPending","form","useForm","Asset","sendTransaction","horizon","useHorizon","useLiveOrderbook","assets","balancelineToAsset","calculation","setPrimaryAmountToMax","validateManualPrice","value","submitForm","error","CustomError","tx","createTransaction","Operation","trackError","VerticalLayout","Controller","AssetSelector","amountInvalid","exceedsBalance","Button","ReadOnlyTextfield","ExpansionPanel","ExpansionPanelSummary","ExpandMoreIcon","Typography","ExpansionPanelDetails","Box","warningColor","Portal","DialogActionsBox","ActionButton","GavelIcon","TradingForm$1","getAssetFromPath","pathname","matchesRoute","routes.tradeAsset","lastArgument","getLastArgumentFromURL","parseAssetID","TradingDialog","useLiveAccountData","dialogActionsRef","useDialogActions","router","useRouter","preselectedAsset","setPreselectedAsset","asset","trustlines","balance","clearPrimaryAction","stringifyAsset","selectPrimaryAction","mainAction","MainContent","Carousel","ViewLoading","LinkToManageAssets","routes.manageAccountAssets","DialogBody","MainTitle","TestnetBadge","ScrollableBalances","InlineErrorBoundary","TradingDialogContainer","navigateToAccount","routes.account","TransactionSender","txContext"],"mappings":"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","x_google_ignoreList":[1]}