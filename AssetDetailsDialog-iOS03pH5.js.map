{"version":3,"file":"AssetDetailsDialog-iOS03pH5.js","sources":["../src/Assets/components/RemoveTrustline.tsx","../src/Assets/components/AssetDetailsActions.tsx","../src/Assets/components/SpendableBalanceBreakdown.tsx","../src/Assets/components/AssetDetailsDialog.tsx"],"sourcesContent":["import React from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport { Asset, Horizon, Operation, Server } from \"stellar-sdk\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { trackError } from \"~App/contexts/notifications\"\nimport { AccountData } from \"~Generic/lib/account\"\nimport { createTransaction } from \"~Generic/lib/transaction\"\nimport { ActionButton, DialogActionsBox } from \"~Generic/components/DialogActions\"\nimport TransactionSender, { SendTransaction } from \"~Transaction/components/TransactionSender\"\n\ninterface Props {\n  account: Account\n  accountData: AccountData\n  asset: Asset\n  horizon: Server\n  onClose: () => void\n  onRemoved: () => void\n  sendTransaction: SendTransaction\n}\n\n// tslint:disable-next-line no-shadowed-variable\nconst RemoveTrustlineDialog = React.memo(function RemoveTrustlineDialog(props: Props) {\n  const { t } = useTranslation()\n  const [txCreationPending, setTxCreationPending] = React.useState(false)\n\n  const removeAsset = async () => {\n    try {\n      setTxCreationPending(true)\n      const operations = [Operation.changeTrust({ asset: props.asset, limit: \"0\", withMuxing: true })]\n      const transaction = await createTransaction(operations, {\n        accountData: props.accountData,\n        horizon: props.horizon,\n        walletAccount: props.account\n      })\n      setTxCreationPending(false)\n      await props.sendTransaction(transaction)\n      props.onRemoved()\n    } catch (error) {\n      setTxCreationPending(false)\n      trackError(error)\n    }\n  }\n\n  const assetBalance = (props.accountData.balances as Horizon.BalanceLineAsset[]).find(\n    balance => balance.asset_code === props.asset.getCode() && balance.asset_issuer === props.asset.getIssuer()\n  )\n  const stillOwnsTokens = assetBalance && parseFloat(assetBalance.balance) > 0\n\n  return (\n    <>\n      <DialogTitle>{t(\"account.remove-trustline.title\")}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {stillOwnsTokens ? (\n            <>{t(\"account.remove-trustline.text.warning\")}</>\n          ) : (\n            <Trans i18nKey=\"account.remove-trustline.text.info\">\n              You are about to remove <b>{{ asset: props.asset.code }}</b> from account \"\n              {{ accountName: props.account.name }}\".\n            </Trans>\n          )}\n        </DialogContentText>\n        {/* Not in the DialogBody's `actions` prop as it's not a fullscreen dialog */}\n        <DialogActionsBox preventMobileActionsBox>\n          <ActionButton onClick={props.onClose} style={{ maxWidth: \"none\" }}>\n            {t(\"account.remove-trustline.action.cancel\")}\n          </ActionButton>\n          {stillOwnsTokens ? null : (\n            <ActionButton\n              autoFocus\n              disabled={stillOwnsTokens}\n              loading={txCreationPending}\n              icon={<CloseIcon />}\n              onClick={removeAsset}\n              style={{ maxWidth: \"none\" }}\n              type=\"primary\"\n            >\n              {t(\"account.remove-trustline.action.remove\")}\n            </ActionButton>\n          )}\n        </DialogActionsBox>\n      </DialogContent>\n    </>\n  )\n})\n\nfunction ConnectedRemoveTrustlineDialog(props: Omit<Props, \"balances\" | \"horizon\" | \"sendTransaction\">) {\n  return (\n    <TransactionSender account={props.account} onSubmissionCompleted={props.onClose}>\n      {({ horizon, sendTransaction }) => (\n        <RemoveTrustlineDialog\n          {...props}\n          accountData={props.accountData}\n          horizon={horizon}\n          sendTransaction={sendTransaction}\n        />\n      )}\n    </TransactionSender>\n  )\n}\n\nexport default React.memo(ConnectedRemoveTrustlineDialog)\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset, Operation, Server, Transaction } from \"stellar-sdk\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport ClearIcon from \"@material-ui/icons/Clear\"\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { trackError } from \"~App/contexts/notifications\"\nimport * as routes from \"~App/routes\"\nimport { CompactDialogTransition } from \"~App/theme\"\nimport { useLiveAccountData } from \"~Generic/hooks/stellar-subscriptions\"\nimport { useRouter } from \"~Generic/hooks/userinterface\"\nimport { createTransaction } from \"~Generic/lib/transaction\"\nimport { stringifyAsset } from \"~Generic/lib/stellar\"\nimport { DialogActionsBox, ActionButton } from \"~Generic/components/DialogActions\"\nimport TransactionSender, { SendTransaction } from \"~Transaction/components/TransactionSender\"\nimport RemoveTrustlineDialog from \"./RemoveTrustline\"\n\nconst dialogActionsBoxStyle: React.CSSProperties = {\n  marginTop: 8\n}\n\ninterface Props {\n  account: Account\n  asset: Asset\n  horizon: Server\n  sendTransaction: SendTransaction\n}\n\nfunction AssetDetailsActions(props: Props) {\n  const { account, asset } = props\n  const [removalDialogOpen, setRemovalDialogOpen] = React.useState(false)\n  const [txCreationPending, setTxCreationPending] = React.useState(false)\n  const router = useRouter()\n  const { t } = useTranslation()\n\n  const accountData = useLiveAccountData(account.accountID, account.testnet)\n\n  const balance = accountData.balances.find(\n    bal => bal.asset_type !== \"native\" && bal.asset_issuer === asset.issuer && bal.asset_code === asset.code\n  )\n\n  const createAddAssetTransaction = async (options: { limit?: string } = {}) => {\n    const operations = [Operation.changeTrust({ asset, limit: options.limit, withMuxing: true })]\n    return createTransaction(operations, {\n      accountData,\n      horizon: props.horizon,\n      walletAccount: props.account\n    })\n  }\n\n  const navigateBackDelayed = React.useCallback(() => {\n    setTimeout(() => router.history.push(routes.account(props.account.id)), 1300)\n  }, [props.account, router.history])\n\n  const sendTransaction = async (createTransactionToSend: () => Promise<Transaction>) => {\n    try {\n      setTxCreationPending(true)\n      const transaction = await createTransactionToSend()\n      setTxCreationPending(false)\n      await props.sendTransaction(transaction)\n      closeRemovalDialog()\n      navigateBackDelayed()\n    } catch (error) {\n      setTxCreationPending(false)\n      trackError(error)\n    }\n  }\n\n  const addThisAsset = () => sendTransaction(() => createAddAssetTransaction())\n  const closeRemovalDialog = React.useCallback(() => setRemovalDialogOpen(false), [])\n  const removeThisAsset = React.useCallback(() => setRemovalDialogOpen(true), [])\n\n  const tradeThisAsset = React.useCallback(\n    () => router.history.push(routes.tradeAsset(props.account.id, undefined, stringifyAsset(asset))),\n    [asset, props.account.id, router.history]\n  )\n\n  return (\n    <>\n      <DialogActionsBox desktopStyle={dialogActionsBoxStyle} smallDialog>\n        {balance ? (\n          <>\n            <ActionButton icon={<ClearIcon />} onClick={removeThisAsset} type=\"secondary\">\n              {t(\"account.add-asset.action.remove\")}\n            </ActionButton>\n            <ActionButton icon={<SwapHorizIcon />} onClick={tradeThisAsset} type=\"primary\">\n              {t(\"account.add-asset.action.trade\")}\n            </ActionButton>\n          </>\n        ) : (\n          <ActionButton loading={txCreationPending} onClick={addThisAsset} type=\"primary\">\n            {t(\"account.add-asset.action.add-asset\")}\n          </ActionButton>\n        )}\n      </DialogActionsBox>\n      <Dialog open={removalDialogOpen} onClose={closeRemovalDialog} TransitionComponent={CompactDialogTransition}>\n        <RemoveTrustlineDialog\n          account={props.account}\n          accountData={accountData}\n          asset={asset}\n          onClose={closeRemovalDialog}\n          onRemoved={navigateBackDelayed}\n        />\n      </Dialog>\n    </>\n  )\n}\n\nfunction ConnectedAssetDetailsActions(props: Omit<Props, \"horizon\" | \"sendTransaction\">) {\n  return (\n    <TransactionSender account={props.account}>\n      {({ horizon, sendTransaction }) => (\n        <AssetDetailsActions {...props} horizon={horizon} sendTransaction={sendTransaction} />\n      )}\n    </TransactionSender>\n  )\n}\n\nexport default React.memo(ConnectedAssetDetailsActions)\n","import BigNumber from \"big.js\"\nimport React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { AccountData } from \"~Generic/lib/account\"\nimport { breakpoints } from \"~App/theme\"\nimport { SingleBalance } from \"~Account/components/AccountBalances\"\n\nconst useBreakdownItemStyles = makeStyles({\n  root: {\n    padding: 0\n  },\n  mainListItemText: {\n    flexShrink: 5\n  },\n  mainListItemTextIndent: {\n    marginLeft: 24,\n\n    [breakpoints.down(600)]: {\n      marginLeft: 12\n    }\n  },\n  mainListItemTextPrimaryTypography: {\n    fontSize: 18,\n    fontWeight: 300,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n\n    [breakpoints.down(400)]: {\n      fontSize: 16,\n      lineHeight: \"20px\"\n    }\n  },\n  mainListItemTextSecondaryTypography: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n\n    [breakpoints.down(400)]: {\n      fontSize: 14\n    },\n    [breakpoints.down(350)]: {\n      fontSize: 12\n    }\n  },\n  balanceListItem: {\n    marginLeft: 8,\n    textAlign: \"right\"\n  }\n})\n\ninterface BreakdownItemProps {\n  amount: string\n  hide?: boolean\n  indent?: boolean\n  primary: React.ReactNode\n  secondary?: React.ReactNode\n  style?: React.CSSProperties\n  variant?: \"deduction\" | \"gross\" | \"total\"\n}\n\nfunction BreakdownItem(props: BreakdownItemProps) {\n  const { variant = \"deduction\" } = props\n  const classes = useBreakdownItemStyles()\n\n  if (props.hide) {\n    return null\n  }\n  return (\n    <ListItem className={classes.root} style={props.style}>\n      <ListItemText\n        classes={{\n          root: `${classes.mainListItemText} ${props.indent ? classes.mainListItemTextIndent : \"\"}`,\n          primary: classes.mainListItemTextPrimaryTypography,\n          secondary: classes.mainListItemTextSecondaryTypography\n        }}\n        primary={props.primary}\n        secondary={props.secondary}\n      />\n      <ListItemText\n        className={classes.balanceListItem}\n        primaryTypographyProps={{\n          style: { fontSize: \"150%\" }\n        }}\n      >\n        {variant === \"deduction\" ? \"-\" : variant === \"gross\" ? \"\" : \"=\"}\n        &nbsp;\n        <SingleBalance assetCode=\"\" balance={props.amount} />\n      </ListItemText>\n    </ListItem>\n  )\n}\n\nconst BreakdownHeadline = React.memo(function BreakdownHeadline(props: { left?: string; right?: string }) {\n  const classes = useBreakdownItemStyles()\n\n  return (\n    <ListItem className={classes.root} style={{ borderBottom: \"none\" }}>\n      <ListItemText\n        classes={{\n          root: classes.mainListItemText,\n          primary: classes.mainListItemTextPrimaryTypography,\n          secondary: classes.mainListItemTextSecondaryTypography\n        }}\n        primary={props.left}\n      />\n      <ListItemText\n        className={classes.balanceListItem}\n        primaryTypographyProps={{\n          style: {\n            fontSize: \"120%\",\n            fontWeight: 300\n          }\n        }}\n        style={{\n          marginTop: 0,\n          marginBottom: 0\n        }}\n      >\n        {props.right}\n      </ListItemText>\n    </ListItem>\n  )\n})\n\ninterface Props {\n  account: Account\n  accountData: AccountData\n  baseReserve: number\n  style?: React.CSSProperties\n}\n\nfunction SpendableBalanceBreakdown(props: Props) {\n  const { t } = useTranslation()\n\n  const nativeBalance = props.accountData.balances.find(balance => balance.asset_type === \"native\")\n  const trustedAssetBalances = props.accountData.balances.filter(balance => balance.asset_type !== \"native\")\n\n  const dataReserve = props.baseReserve * Object.keys(props.accountData.data_attr).length\n  const signersReserve = props.baseReserve * props.accountData.signers.length\n  const trustlinesReserve = props.baseReserve * trustedAssetBalances.length\n  const sellingLiabilities = nativeBalance ? BigNumber(nativeBalance.selling_liabilities) : BigNumber(0)\n\n  // calculate open orders reserve based on subentry count to circumvent fetching all orders\n  const openOrdersReserve = BigNumber(props.accountData.subentry_count * props.baseReserve)\n    .minus(props.baseReserve * (props.accountData.signers.length - 1))\n    .minus(dataReserve)\n    .minus(trustlinesReserve)\n\n  const rawBalance = nativeBalance ? BigNumber(nativeBalance.balance) : BigNumber(0)\n  const spendableBalance = rawBalance\n    .minus(props.baseReserve)\n    .minus(dataReserve)\n    .minus(openOrdersReserve)\n    .minus(signersReserve)\n    .minus(trustlinesReserve)\n    .minus(sellingLiabilities)\n\n  return (\n    <List style={{ padding: 0 }}>\n      <BreakdownHeadline right={t(\"account.balance-details.spendable-balances.headline\")} />\n      <BreakdownItem\n        amount={rawBalance.toFixed(4)}\n        primary={t(\"account.balance-details.spendable-balances.total-balance.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.total-balance.secondary\")}\n        style={props.style}\n        variant=\"gross\"\n      />\n      <BreakdownItem\n        amount={props.baseReserve.toFixed(1)}\n        indent\n        primary={t(\"account.balance-details.spendable-balances.base-reserve.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.base-reserve.secondary\")}\n        style={props.style}\n      />\n      <BreakdownItem\n        amount={signersReserve.toFixed(1)}\n        indent\n        primary={t(\"account.balance-details.spendable-balances.signers-reserve.primary\")}\n        secondary={\n          props.accountData.signers.length === 1\n            ? t(\"account.balance-details.spendable-balances.signers-reserve.secondary.single-key\")\n            : t(\"account.balance-details.spendable-balances.signers-reserve.secondary.multiple-keys\")\n        }\n        style={props.style}\n      />\n      <BreakdownItem\n        amount={trustlinesReserve.toFixed(1)}\n        hide={trustlinesReserve === 0}\n        indent\n        primary={t(\"account.balance-details.spendable-balances.trustline-reserve.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.trustline-reserve.secondary\")}\n        style={props.style}\n      />\n      <BreakdownItem\n        amount={openOrdersReserve.toFixed(1)}\n        hide={openOrdersReserve.cmp(0) === 0}\n        indent\n        primary={t(\"account.balance-details.spendable-balances.open-orders-reserve.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.open-orders-reserve.secondary\")}\n        style={props.style}\n      />\n      <BreakdownItem\n        amount={dataReserve.toFixed(1)}\n        hide={dataReserve === 0}\n        indent\n        primary={t(\"account.balance-details.spendable-balances.data-reserve.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.data-reserve.secondary\")}\n        style={props.style}\n      />\n      <BreakdownItem\n        amount={sellingLiabilities.toString()}\n        hide={sellingLiabilities.eq(0)}\n        indent\n        primary={t(\"account.balance-details.spendable-balances.selling-liabilities.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.selling-liabilities.secondary\")}\n        style={props.style}\n      />\n      <BreakdownItem\n        amount={spendableBalance.toString()}\n        primary={t(\"account.balance-details.spendable-balances.spendable-balance.primary\")}\n        secondary={t(\"account.balance-details.spendable-balances.spendable-balance.secondary\")}\n        style={props.style}\n        variant=\"total\"\n      />\n    </List>\n  )\n}\n\nexport default React.memo(SpendableBalanceBreakdown)\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset } from \"stellar-sdk\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { useAccountData, useAssetMetadata, useStellarToml } from \"~Generic/hooks/stellar\"\nimport { useClipboard, useIsMobile } from \"~Generic/hooks/userinterface\"\nimport { BASE_RESERVE, parseAssetID } from \"~Generic/lib/stellar\"\nimport { openLink } from \"~Platform/links\"\nimport { breakpoints } from \"~App/theme\"\nimport { StellarTomlCurrency } from \"~shared/types/stellar-toml\"\nimport { SingleBalance } from \"~Account/components/AccountBalances\"\nimport DialogBody from \"~Layout/components/DialogBody\"\nimport { AccountName } from \"~Generic/components/Fetchers\"\nimport { ReadOnlyTextfield } from \"~Generic/components/FormFields\"\nimport { VerticalLayout } from \"~Layout/components/Box\"\nimport MainTitle from \"~Generic/components/MainTitle\"\nimport AssetDetailsActions from \"./AssetDetailsActions\"\nimport AssetLogo from \"./AssetLogo\"\nimport SpendableBalanceBreakdown from \"./SpendableBalanceBreakdown\"\nimport { useLiveAccountData } from \"~Generic/hooks/stellar-subscriptions\"\n\nconst capitalize = (text: string) => text[0].toUpperCase() + text.substr(1)\n\nconst useDetailContentStyles = makeStyles({\n  card: {\n    backgroundColor: \"#fbfbfb\",\n    borderRadius: 8,\n    margin: \"12px -8px\",\n    overflowY: \"auto\"\n  },\n  cardContent: {\n    position: \"relative\",\n    padding: \"8px 16px !important\"\n  },\n  cardTitle: {\n    fontSize: 20,\n    fontWeight: 400,\n    marginBottom: 8\n  },\n  cardLogo: {\n    position: \"absolute\",\n    top: 8,\n    right: 8,\n    width: 72,\n    height: 72,\n    backgroundColor: \"white\",\n    boxShadow: \"0 0 2px 2px rgba(0, 0, 0, 0.2)\"\n  },\n  cardLogoImage: {\n    width: \"100%\",\n    height: \"100%\"\n  }\n})\n\ninterface LumenDetailProps {\n  account: Account\n}\n\nconst LumenDetails = React.memo(function LumenDetails(props: LumenDetailProps) {\n  const accountData = useLiveAccountData(props.account.accountID, props.account.testnet)\n  const classes = useDetailContentStyles()\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          <ReadOnlyTextfield\n            disableUnderline\n            fullWidth\n            label={t(\"account.asset-details.lumen.description.label\")}\n            multiline\n            value={t(\"account.asset-details.lumen.description.text\")}\n          />\n        </CardContent>\n      </Card>\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          <SpendableBalanceBreakdown account={props.account} accountData={accountData} baseReserve={BASE_RESERVE} />\n        </CardContent>\n      </Card>\n    </>\n  )\n})\n\ninterface AssetDetailProps {\n  account: Account\n  asset: Asset\n  metadata: StellarTomlCurrency | undefined\n}\n\nconst AssetDetails = React.memo(function AssetDetails({ account, asset, metadata }: AssetDetailProps) {\n  const issuingAccountData = useAccountData(asset.issuer, account.testnet)\n  const stellarToml = useStellarToml(issuingAccountData.home_domain)\n\n  const classes = useDetailContentStyles()\n  const clipboard = useClipboard()\n  const { t } = useTranslation()\n\n  const copyIssuerToClipboard = React.useCallback(() => clipboard.copyToClipboard(asset.getIssuer()), [\n    asset,\n    clipboard\n  ])\n\n  return (\n    <>\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          {metadata && metadata.desc ? (\n            <ReadOnlyTextfield\n              disableUnderline\n              fullWidth\n              label={t(\"account.asset-details.general.description.label\")}\n              margin=\"dense\"\n              multiline\n              value={metadata.desc}\n            />\n          ) : null}\n          <ReadOnlyTextfield\n            disableUnderline\n            fullWidth\n            label={t(\"account.asset-details.general.issuing-account.label\")}\n            margin=\"dense\"\n            onClick={copyIssuerToClipboard}\n            value={asset.getIssuer()}\n            inputProps={{\n              style: {\n                cursor: \"pointer\",\n                textOverflow: \"ellipsis\"\n              }\n            }}\n          />\n          <ReadOnlyTextfield\n            disableUnderline\n            fullWidth\n            label={t(\"account.asset-details.general.account-flags.label\")}\n            margin=\"dense\"\n            multiline\n            value={capitalize(\n              [\n                issuingAccountData.flags.auth_required\n                  ? `• ${t(\"account.asset-details.general.account-flags.auth-required\")}`\n                  : `• ${t(\"account.asset-details.general.account-flags.auth-not-required\")}`,\n                issuingAccountData.flags.auth_revocable\n                  ? `• ${t(\"account.asset-details.general.account-flags.auth-revocable\")}`\n                  : `• ${t(\"account.asset-details.general.account-flags.auth-not-revocable\")}`,\n                issuingAccountData.flags.auth_immutable\n                  ? `• ${t(\"account.asset-details.general.account-flags.auth-immutable\")}`\n                  : `• ${t(\"account.asset-details.general.account-flags.auth-mutable\")}`\n              ].join(\"\\n\")\n            )}\n          />\n          {metadata && metadata.conditions ? (\n            <ReadOnlyTextfield\n              disableUnderline\n              fullWidth\n              label={t(\"account.asset-details.general.conditions.label\")}\n              margin=\"dense\"\n              multiline\n              value={metadata.conditions}\n            />\n          ) : null}\n          {metadata && metadata.anchor_asset_type ? (\n            <ReadOnlyTextfield\n              disableUnderline\n              fullWidth\n              label={t(\"account.asset-details.general.anchor-asset.label\")}\n              margin=\"dense\"\n              multiline\n              value={\n                metadata.anchor_asset\n                  ? `${capitalize(metadata.anchor_asset)} (${capitalize(metadata.anchor_asset_type)})`\n                  : capitalize(metadata.anchor_asset_type)\n              }\n            />\n          ) : null}\n          {metadata && metadata.redemption_instructions ? (\n            <ReadOnlyTextfield\n              disableUnderline\n              fullWidth\n              label={t(\"account.asset-details.general.redemption-instructions.label\")}\n              margin=\"dense\"\n              multiline\n              value={metadata.redemption_instructions}\n            />\n          ) : null}\n        </CardContent>\n      </Card>\n      {stellarToml && stellarToml.DOCUMENTATION ? (\n        <Card className={classes.card}>\n          <CardContent className={classes.cardContent}>\n            {stellarToml.DOCUMENTATION.ORG_LOGO ? (\n              <Avatar className={classes.cardLogo}>\n                <img\n                  alt=\"Organization logo\"\n                  className={classes.cardLogoImage}\n                  src={stellarToml.DOCUMENTATION.ORG_LOGO}\n                />\n              </Avatar>\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_NAME ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.name.label\")}\n                margin=\"dense\"\n                value={stellarToml.DOCUMENTATION.ORG_NAME}\n              />\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_DBA ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.dba.label\")}\n                margin=\"dense\"\n                value={stellarToml.DOCUMENTATION.ORG_DBA}\n              />\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_URL ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.website.label\")}\n                margin=\"dense\"\n                onClick={() => openLink(stellarToml!.DOCUMENTATION!.ORG_URL!)}\n                value={stellarToml.DOCUMENTATION.ORG_URL}\n                inputProps={{\n                  style: {\n                    cursor: \"pointer\",\n                    textDecoration: \"underline\"\n                  }\n                }}\n              />\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_DESCRIPTION ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.description.label\")}\n                margin=\"dense\"\n                multiline\n                value={stellarToml.DOCUMENTATION.ORG_DESCRIPTION}\n              />\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_PHYSICAL_ADDRESS ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.address.label\")}\n                margin=\"dense\"\n                multiline\n                value={stellarToml.DOCUMENTATION.ORG_PHYSICAL_ADDRESS}\n                inputProps={{\n                  style: {\n                    whiteSpace: \"pre\"\n                  }\n                }}\n              />\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_OFFICIAL_EMAIL ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.email.label\")}\n                margin=\"dense\"\n                multiline\n                onClick={() => openLink(\"mailto:\" + stellarToml!.DOCUMENTATION!.ORG_OFFICIAL_EMAIL!)}\n                value={stellarToml.DOCUMENTATION.ORG_OFFICIAL_EMAIL}\n                inputProps={{\n                  style: {\n                    cursor: \"pointer\",\n                    textDecoration: \"underline\"\n                  }\n                }}\n              />\n            ) : null}\n            {stellarToml.DOCUMENTATION.ORG_PHONE_NUMBER ? (\n              <ReadOnlyTextfield\n                disableUnderline\n                fullWidth\n                label={t(\"account.asset-details.general.organisation.phone-number.label\")}\n                margin=\"dense\"\n                multiline\n                value={stellarToml.DOCUMENTATION.ORG_PHONE_NUMBER}\n              />\n            ) : null}\n          </CardContent>\n        </Card>\n      ) : null}\n    </>\n  )\n})\n\nconst useAssetDetailStyles = makeStyles({\n  logo: {\n    position: \"absolute\",\n    top: 4,\n    right: -4,\n    width: 96,\n    height: 96,\n    boxShadow: \"0 0 8px 2px rgba(0, 0, 0, 0.2)\",\n    fontSize: 24,\n\n    [breakpoints.down(600)]: {\n      width: 64,\n      height: 64,\n      fontSize: 18\n    }\n  },\n  domain: {\n    marginTop: -4,\n    marginLeft: 47, // should be 46, but somehow 47 looks correct\n    marginBottom: 16,\n\n    [breakpoints.down(600)]: {\n      marginLeft: 39\n    }\n  }\n})\n\ninterface Props {\n  account: Account\n  assetID: string\n  onClose: () => void\n}\n\nfunction AssetDetailsDialog(props: Props) {\n  const accountData = useAccountData(props.account.accountID, props.account.testnet)\n  const asset = React.useMemo(() => parseAssetID(props.assetID), [props.assetID])\n  const classes = useAssetDetailStyles()\n  const isSmallScreen = useIsMobile()\n\n  const balance = accountData.balances.find(\n    asset.isNative()\n      ? bal => bal.asset_type === \"native\"\n      : bal => bal.asset_type !== \"native\" && bal.asset_issuer === asset.issuer && bal.asset_code === asset.code\n  )\n\n  const metadata = useAssetMetadata(asset, props.account.testnet)\n\n  const dialogActions = React.useMemo(\n    () => (asset.isNative() ? null : <AssetDetailsActions account={props.account} asset={asset} />),\n    [props.account, asset]\n  )\n\n  return (\n    <DialogBody\n      excessWidth={8}\n      top={\n        <>\n          <MainTitle\n            nowrap\n            onBack={props.onClose}\n            style={{ position: \"relative\", zIndex: 1 }}\n            title={\n              asset.isNative()\n                ? \"Stellar Lumens (XLM)\"\n                : metadata && metadata.name\n                ? `${metadata.name} (${asset.getCode()})`\n                : asset.getCode()\n            }\n            titleStyle={{\n              maxWidth: isSmallScreen ? \"calc(100% - 75px)\" : \"calc(100% - 100px)\",\n              textShadow: \"0 0 5px white, 0 0 5px white, 0 0 5px white\"\n            }}\n          />\n          <Typography className={classes.domain} variant=\"subtitle1\">\n            {balance ? (\n              <SingleBalance assetCode={asset.getCode()} balance={balance.balance} />\n            ) : asset.isNative() ? (\n              \"stellar.org\"\n            ) : (\n              <AccountName publicKey={asset.getIssuer()} testnet={props.account.testnet} />\n            )}\n          </Typography>\n          <AssetLogo asset={asset} className={classes.logo} testnet={props.account.testnet} />\n        </>\n      }\n      actions={dialogActions}\n      actionsPosition=\"bottom\"\n      fitToShrink\n    >\n      <VerticalLayout margin=\"0 4px\" padding={`0 0 ${isSmallScreen ? 68 : 0}px`} shrink={0}>\n        {asset.isNative() ? (\n          <LumenDetails account={props.account} />\n        ) : (\n          <AssetDetails account={props.account} asset={asset} metadata={metadata} />\n        )}\n      </VerticalLayout>\n    </DialogBody>\n  )\n}\n\nexport default AssetDetailsDialog\n"],"names":["RemoveTrustlineDialog","Operation","account","routes.account","routes.tradeAsset","BreakdownHeadline","BigNumber","LumenDetails","SpendableBalanceBreakdown","AssetDetails","AssetDetailsActions"],"mappings":"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"}