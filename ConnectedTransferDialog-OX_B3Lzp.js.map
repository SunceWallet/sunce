{"version":3,"mappings":";+MAiBA,MAAMA,EAAQC,EAAM,KAAK,SAAeC,EAAmB,CACnD,MAAE,EAAAC,CAAE,EAAIC,EAAe,EAE3B,OAAAH,EAAA,cAACI,EAAA,CACC,MACGJ,EAAA,0BACEC,EAAM,OAAS,UAAYC,EAAE,gCAAgC,EAAIA,EAAE,mCAAmC,EAAG,IACzGD,EAAM,QAAQ,QAAUD,EAAA,cAACK,EAAa,OAAO,CAAE,WAAY,EAAK,GAAK,IACxE,EAEF,OAAQJ,EAAM,eAChB,CAEJ,CAAC,EAUD,SAASK,EAAqBL,EAAkC,CAC9D,MAAMM,EAAgBC,EAAY,EAEhC,OAAAR,EAAA,cAACS,EAAA,CACC,IACET,EAAA,cAAAA,EAAA,cACGA,EAAA,cAAAD,EAAA,CAAM,QAASE,EAAM,QAAS,eAAgBA,EAAM,eAAgB,KAAMA,EAAM,KAAM,EACvFD,EAAA,cAACA,EAAM,SAAN,CAAe,SAAWA,EAAA,cAAAU,EAAA,IAAa,CACtC,EAAAV,EAAA,cAACW,EAAmB,SAASV,EAAM,QAAS,QAAO,EAAC,EACtD,CACF,EAEF,QAASA,EAAM,kBAEfD,EAAA,cAACY,GAAe,OAAO,OAAO,QAASL,EAAgB,WAAa,UACjE,EAAAN,EAAM,QACT,CACF,CAEJ,CAEA,MAAAY,EAAeb,EAAM,KAAKM,CAAoB,EC7CxCQ,EAAiBd,EAAM,KAAK,IAAMe,EAAA,WAAO,8BAAkB,mDAAC,EAElE,SAASC,EAAwBf,EAAkE,CACjG,MAAMgB,EAAcC,EAAmBjB,EAAM,QAAQ,UAAWA,EAAM,QAAQ,OAAO,EAGnF,OAAAD,EAAA,cAACmB,GAAkB,QAASlB,EAAM,SAC/B,CAAC,CAAE,QAAAmB,EAAS,gBAAAC,CACX,IAAArB,EAAA,cAACA,EAAM,SAAN,CACC,SACEA,EAAA,cAACM,EAAA,CACC,QAASL,EAAM,QACf,iBAAkB,OAClB,eAAgBA,EAAM,QACtB,KAAMA,EAAM,MAEZD,EAAA,cAACsB,EAAY,QAAQ,GAAK,GAC5B,kBAGDR,EAAgB,IAAGb,EAAO,YAAAgB,EAA0B,QAAAG,EAAkB,gBAAAC,CAAkC,GAG/G,CAEJ,CAEA,MAAAE,EAAevB,EAAM,KAAKgB,CAAuB","names":["Title","React","props","t","useTranslation","MainTitle","TestnetBadge","TransferDialogLayout","isSmallScreen","useIsMobile","DialogBody","InlineLoader","ScrollableBalances","VerticalLayout","TransferDialogLayout$1","TransferDialog","__vitePreload","ConnectedTransferDialog","accountData","useLiveAccountData","TransactionSender","horizon","sendTransaction","ViewLoading","ConnectedTransferDialog$1"],"ignoreList":[],"sources":["../src/TransferService/components/TransferDialogLayout.tsx","../src/TransferService/components/ConnectedTransferDialog.tsx"],"sourcesContent":["import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { useIsMobile, RefStateObject } from \"~Generic/hooks/userinterface\"\nimport ScrollableBalances from \"~Assets/components/ScrollableBalances\"\nimport DialogBody from \"~Layout/components/DialogBody\"\nimport TestnetBadge from \"~Generic/components/TestnetBadge\"\nimport InlineLoader from \"~Generic/components/InlineLoader\"\nimport { VerticalLayout } from \"~Layout/components/Box\"\nimport MainTitle from \"~Generic/components/MainTitle\"\n\ninterface TitleProps {\n  account: Account\n  onNavigateBack: () => void\n  type: \"deposit\" | \"withdrawal\"\n}\n\nconst Title = React.memo(function Title(props: TitleProps) {\n  const { t } = useTranslation()\n  return (\n    <MainTitle\n      title={\n        <span>\n          {props.type === \"deposit\" ? t(\"transfer-service.title.deposit\") : t(\"transfer-service.title.withdrawal\")}{\" \"}\n          {props.account.testnet ? <TestnetBadge style={{ marginLeft: 8 }} /> : null}\n        </span>\n      }\n      onBack={props.onNavigateBack}\n    />\n  )\n})\n\ninterface TransferDialogLayoutProps {\n  account: Account\n  children: React.ReactNode\n  dialogActionsRef: RefStateObject | undefined\n  onNavigateBack: () => void\n  type: \"deposit\" | \"withdrawal\"\n}\n\nfunction TransferDialogLayout(props: TransferDialogLayoutProps) {\n  const isSmallScreen = useIsMobile()\n  return (\n    <DialogBody\n      top={\n        <>\n          <Title account={props.account} onNavigateBack={props.onNavigateBack} type={props.type} />\n          <React.Suspense fallback={<InlineLoader />}>\n            <ScrollableBalances account={props.account} compact />\n          </React.Suspense>\n        </>\n      }\n      actions={props.dialogActionsRef}\n    >\n      <VerticalLayout height=\"100%\" padding={isSmallScreen ? \"16px 0px\" : \"16px 8px\"}>\n        {props.children}\n      </VerticalLayout>\n    </DialogBody>\n  )\n}\n\nexport default React.memo(TransferDialogLayout)\n","/*\n * We need to put this wrapper component in a module of its own and lazy-load the\n * actual dialog from here, so that we can show a loading animation in the\n * <TransferDialogLayout>.\n *\n * This is necessary since the TransferDialog bundle is pretty large and takes a\n * relatively long time to be parsed on older mobile devices.\n */\n\nimport React from \"react\"\nimport { useLiveAccountData } from \"~Generic/hooks/stellar-subscriptions\"\nimport TransactionSender from \"~Transaction/components/TransactionSender\"\nimport ViewLoading from \"~Generic/components/ViewLoading\"\nimport { TransferDialogProps } from \"./TransferDialog\"\nimport TransferDialogLayout from \"./TransferDialogLayout\"\n\nconst TransferDialog = React.lazy(() => import(\"./TransferDialog\"))\n\nfunction ConnectedTransferDialog(props: Pick<TransferDialogProps, \"account\" | \"onClose\" | \"type\">) {\n  const accountData = useLiveAccountData(props.account.accountID, props.account.testnet)\n\n  return (\n    <TransactionSender account={props.account}>\n      {({ horizon, sendTransaction }) => (\n        <React.Suspense\n          fallback={\n            <TransferDialogLayout\n              account={props.account}\n              dialogActionsRef={undefined}\n              onNavigateBack={props.onClose}\n              type={props.type}\n            >\n              <ViewLoading height={300} />\n            </TransferDialogLayout>\n          }\n        >\n          <TransferDialog {...props} accountData={accountData} horizon={horizon} sendTransaction={sendTransaction} />\n        </React.Suspense>\n      )}\n    </TransactionSender>\n  )\n}\n\nexport default React.memo(ConnectedTransferDialog)\n"],"file":"ConnectedTransferDialog-OX_B3Lzp.js"}