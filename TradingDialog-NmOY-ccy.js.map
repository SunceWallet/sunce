{"version":3,"file":"TradingDialog-NmOY-ccy.js","sources":["../src/Trading/components/MainActionSelection.tsx","../node_modules/@material-ui/icons/Gavel.js","../src/Generic/lib/orderbook.ts","../src/Trading/hooks/conversion.ts","../src/Trading/hooks/form.ts","../src/Trading/components/TradingPrice.tsx","../src/Trading/components/TradingForm.tsx","../src/Trading/components/TradingDialog.tsx"],"sourcesContent":["import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport RemoveIcon from \"@material-ui/icons/Remove\"\nimport MainSelectionButton from \"~Generic/components/MainSelectionButton\"\nimport { HorizontalLayout } from \"~Layout/components/Box\"\n\ninterface Props {\n  onSelectBuy: () => void\n  onSelectSell: () => void\n  style?: React.CSSProperties\n}\n\nconst MainActionSelection = React.forwardRef(function MainActionSelection(\n  props: Props,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const { t } = useTranslation()\n\n  return (\n    <HorizontalLayout ref={ref} justifyContent=\"space-evenly\" margin=\"48px 0 24px\" padding=\"0 8px\" wrap=\"wrap\">\n      <MainSelectionButton\n        label={t(\"trading.action-selection.buy.label\")}\n        description={t(\"trading.action-selection.buy.description\")}\n        gutterBottom\n        onClick={props.onSelectBuy}\n        Icon={AddIcon}\n      />\n      <MainSelectionButton\n        label={t(\"trading.action-selection.sell.label\")}\n        description={t(\"trading.action-selection.sell.description\")}\n        gutterBottom\n        onClick={props.onSelectSell}\n        Icon={RemoveIcon}\n      />\n    </HorizontalLayout>\n  )\n})\n\nexport default React.memo(MainActionSelection)\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"defs\", null, _react.default.createElement(\"path\", {\n  id: \"a\",\n  d: \"M0 0h24v24H0V0z\"\n})), _react.default.createElement(\"path\", {\n  d: \"M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z\"\n})), 'Gavel');\n\nexports.default = _default;","import { Asset } from \"stellar-sdk\"\n\n/*\n * Quick orderbook cheat sheet:\n *\n * Consider a trading pair T (buy=asset_x, sell=asset_y).\n * The inverse would be T'(buy=asset_y, sell=asset_x).\n *\n * asks(T) === bids(T').map(offer => ({ ...offer, price = 1 / offer.price }))\n * asks(T') === bids(T).map(offer => ({ ...offer, price = 1 / offer.price }))\n *\n * Since the asks & bids are ordered from closest to last trade price to furthest when\n * returned by horizon server, the order of asks(T) & bids(T') is the same as well.\n */\n\n// @types/stellar-sdk types seem wrong\nexport interface FixedOrderbookOffer {\n  price_r: {\n    n: number\n    d: number\n  }\n  price: string\n  amount: string\n}\n\n// @types/stellar-sdk types seem wrong\nexport interface FixedOrderbookRecord {\n  asks: FixedOrderbookOffer[]\n  bids: FixedOrderbookOffer[]\n  base: Asset\n  counter: Asset\n}\n\nexport function calculateSpread(asks: FixedOrderbookOffer[], bids: FixedOrderbookOffer[]) {\n  // TODO: Calculate according to trade volume (because larger volumes will likely lead to larger spreads)\n\n  if (asks.length === 0 || bids.length === 0) {\n    return {\n      absoluteSpread: 0,\n      relativeSpread: 0\n    }\n  }\n\n  const absoluteSpread = Number.parseFloat(asks[0].price) - Number.parseFloat(bids[0].price)\n  const relativeSpread = absoluteSpread / Math.min(Number.parseFloat(asks[0].price), Number.parseFloat(bids[0].price))\n  return {\n    absoluteSpread,\n    relativeSpread\n  }\n}\n","import BigNumber from \"big.js\"\nimport React from \"react\"\nimport { FixedOrderbookOffer } from \"~Generic/lib/orderbook\"\n\nconst sum = (numbers: BigNumber[]) => numbers.reduce((total, no) => total.add(no), BigNumber(0))\n\nexport function useConversionOffers(\n  offers: FixedOrderbookOffer[],\n  amount: BigNumber,\n  invertOfferAmounts: boolean = false\n) {\n  // Best offers always returned first by horizon\n  const bestOffers = invertOfferAmounts\n    ? offers.map(offer => ({\n        ...offer,\n        amount: BigNumber(offer.price).eq(0)\n          ? BigNumber(0).toFixed(7)\n          : BigNumber(offer.amount)\n              .div(offer.price)\n              .toFixed(7)\n      }))\n    : offers\n\n  const bestMatches = React.useMemo(() => {\n    const offersToCover: FixedOrderbookOffer[] = []\n    let volume = BigNumber(0)\n\n    for (const matchingOffer of bestOffers) {\n      if (volume.gte(amount)) {\n        break\n      }\n      if (!BigNumber(matchingOffer.price).eq(0)) {\n        offersToCover.push(matchingOffer)\n        volume = volume.add(matchingOffer.amount)\n      }\n    }\n\n    return {\n      offers: offersToCover,\n      volume\n    }\n  }, [bestOffers, amount])\n\n  const bestPrices = bestMatches.offers.map(offer => BigNumber(offer.price))\n  const worstPriceOfBestMatches = bestPrices.length > 0 ? bestPrices[bestPrices.length - 1] : undefined\n\n  const firstBestOffers = bestMatches.offers.slice(0, -1)\n  const lastBestOffer = bestMatches.offers[bestMatches.offers.length - 1]\n\n  const estimatedReturn = sum([\n    ...firstBestOffers.slice(0, -1).map(offer => BigNumber(offer.amount).mul(offer.price)),\n    lastBestOffer\n      ? BigNumber(lastBestOffer.price).mul(BigNumber(lastBestOffer.amount).sub(bestMatches.volume.sub(amount)))\n      : BigNumber(0)\n  ])\n\n  return {\n    estimatedReturn,\n    worstPriceOfBestMatches\n  }\n}\n","import BigNumber from \"big.js\"\nimport { Asset, Horizon } from \"stellar-sdk\"\nimport { AccountData, BalanceLine } from \"~Generic/lib/account\"\nimport { formatBalance, BalanceFormattingOptions } from \"~Generic/lib/balances\"\nimport { FormBigNumber, isValidAmount } from \"~Generic/lib/form\"\nimport { calculateSpread, FixedOrderbookRecord } from \"~Generic/lib/orderbook\"\nimport {\n  BASE_RESERVE,\n  findMatchingBalanceLine,\n  getAccountMinimumBalance,\n  getSpendableBalance\n} from \"~Generic/lib/stellar\"\nimport { useConversionOffers } from \"./conversion\"\n\nexport const bigNumberToInputValue = (bignum: BigNumber, overrides?: BalanceFormattingOptions) =>\n  formatBalance(bignum, { minimumSignificants: 3, maximumSignificants: 9, groupThousands: false, ...overrides })\n\nfunction getSpendableBalanceWithoutBaseReserve(accountMinimumBalance: BigNumber, balanceLine: BalanceLine) {\n  const spendableBalance = getSpendableBalance(accountMinimumBalance, balanceLine).minus(\n    // subtract base-reserve when asset_type is native because placing a new order requires 1 * base-reserve XLM\n    BigNumber(balanceLine.asset_type === \"native\" ? BASE_RESERVE : BigNumber(0))\n  )\n\n  // return 0 if calculated balance is negative\n  return spendableBalance.cmp(BigNumber(0)) < 0 ? BigNumber(0) : spendableBalance\n}\n\nexport interface TradingFormValues {\n  primaryAsset: Asset | undefined\n  primaryAmountString: string\n  secondaryAsset: Asset\n  manualPrice: string\n}\n\ninterface CalculationParameters {\n  accountData: AccountData\n  priceMode: \"primary\" | \"secondary\"\n  primaryAction: \"buy\" | \"sell\"\n  tradePair: FixedOrderbookRecord\n  values: TradingFormValues\n}\n\ninterface CalculationResults {\n  defaultPrice: string\n  effectivePrice: BigNumber\n  maxPrimaryAmount: BigNumber\n  minAccountBalance: BigNumber\n  primaryAmount: BigNumber\n  primaryBalance: Horizon.BalanceLine | undefined\n  relativeSpread: number\n  secondaryAmount: BigNumber\n  secondaryBalance: Horizon.BalanceLine | undefined\n  spendablePrimaryBalance: BigNumber\n  spendableSecondaryBalance: BigNumber\n}\n\nexport function useCalculation(parameters: CalculationParameters): CalculationResults {\n  const { accountData, priceMode, primaryAction, tradePair } = parameters\n  const { manualPrice, primaryAmountString, primaryAsset, secondaryAsset } = parameters.values\n\n  const price =\n    manualPrice && isValidAmount(manualPrice)\n      ? priceMode === \"secondary\"\n        ? FormBigNumber(manualPrice)\n        : FormBigNumber(manualPrice).eq(0) // prevent division by zero\n        ? BigNumber(0)\n        : BigNumber(1).div(FormBigNumber(manualPrice))\n      : BigNumber(0)\n\n  const primaryAmount =\n    primaryAmountString && isValidAmount(primaryAmountString) ? FormBigNumber(primaryAmountString) : BigNumber(0)\n\n  const primaryBalance = primaryAsset ? findMatchingBalanceLine(accountData.balances, primaryAsset) : undefined\n  const secondaryBalance = secondaryAsset ? findMatchingBalanceLine(accountData.balances, secondaryAsset) : undefined\n\n  const { worstPriceOfBestMatches } = useConversionOffers(\n    primaryAction === \"buy\" ? tradePair.asks : tradePair.bids,\n    primaryAmount.gt(0) ? primaryAmount : BigNumber(0.01),\n    primaryAction === \"sell\"\n  )\n\n  const { relativeSpread } = calculateSpread(tradePair.asks, tradePair.bids)\n  const bestPrice = worstPriceOfBestMatches && worstPriceOfBestMatches.gt(0) ? worstPriceOfBestMatches : undefined\n  const effectivePrice = price.gt(0) ? price : bestPrice || BigNumber(0)\n  const secondaryAmount = primaryAmount.mul(effectivePrice)\n\n  // prevent division by zero\n  const inversePrice = effectivePrice.eq(0) ? BigNumber(0) : BigNumber(1).div(effectivePrice)\n  const defaultPrice = bigNumberToInputValue(priceMode === \"secondary\" ? effectivePrice : inversePrice)\n\n  const minAccountBalance = getAccountMinimumBalance(accountData)\n\n  const spendablePrimaryBalance = primaryBalance\n    ? primaryAction === \"sell\"\n      ? getSpendableBalanceWithoutBaseReserve(minAccountBalance, primaryBalance)\n      : getSpendableBalance(minAccountBalance, primaryBalance)\n    : BigNumber(0)\n\n  const spendableSecondaryBalance = secondaryBalance\n    ? primaryAction === \"buy\"\n      ? getSpendableBalanceWithoutBaseReserve(minAccountBalance, secondaryBalance)\n      : getSpendableBalance(minAccountBalance, secondaryBalance)\n    : BigNumber(0)\n\n  const maxPrimaryAmount =\n    primaryAction === \"buy\"\n      ? spendableSecondaryBalance.gt(0) && effectivePrice.gt(0)\n        ? BigNumber(spendableSecondaryBalance).div(effectivePrice)\n        : BigNumber(0)\n      : spendablePrimaryBalance.gt(0)\n      ? BigNumber(spendablePrimaryBalance)\n      : BigNumber(0)\n\n  return {\n    defaultPrice,\n    effectivePrice,\n    maxPrimaryAmount,\n    minAccountBalance,\n    primaryAmount,\n    primaryBalance,\n    relativeSpread,\n    secondaryAmount,\n    secondaryBalance,\n    spendablePrimaryBalance,\n    spendableSecondaryBalance\n  }\n}\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset } from \"stellar-sdk\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport Select from \"@material-ui/core/Select\"\nimport TextField from \"@material-ui/core/TextField\"\n\ninterface TradingPriceProps {\n  defaultPrice?: string\n  inputError?: string\n  manualPrice?: string\n  onBlur?: () => void\n  onChange?: (event: React.ChangeEvent) => void\n  onSetPriceDenotedIn: (denotedIn: \"primary\" | \"secondary\") => void\n  priceDenotedIn: \"primary\" | \"secondary\"\n  primaryAsset: Asset | undefined\n  secondaryAsset: Asset | undefined\n  selectOnFocus?: boolean\n  style?: React.CSSProperties\n}\n\nconst TradingPrice = React.forwardRef(function TradingPrice(props: TradingPriceProps, ref: React.Ref<HTMLDivElement>) {\n  const isDisabled = !props.primaryAsset || !props.secondaryAsset\n  const { t } = useTranslation()\n\n  const priceUnit = props.priceDenotedIn === \"primary\" ? props.secondaryAsset?.getCode() : props.primaryAsset?.getCode()\n\n  const label = priceUnit\n    ? t(\"trading.trading-price.label\", { unit: priceUnit })\n    : t(\"trading.trading-price.default-label\")\n\n  const endAdornment = (\n    <InputAdornment position=\"end\">\n      <Select\n        disabled={isDisabled}\n        disableUnderline\n        onChange={event => props.onSetPriceDenotedIn(event.target.value as any)}\n        style={{ fontWeight: 400 }}\n        value={props.priceDenotedIn}\n      >\n        <MenuItem selected={props.priceDenotedIn === \"secondary\"} value=\"secondary\">\n          {props.secondaryAsset ? props.secondaryAsset.getCode() : \"\"}\n        </MenuItem>\n        <MenuItem selected={props.priceDenotedIn === \"primary\"} value=\"primary\">\n          {props.primaryAsset ? props.primaryAsset.getCode() : \"\"}\n        </MenuItem>\n      </Select>\n    </InputAdornment>\n  )\n\n  return (\n    <TextField\n      inputProps={{\n        pattern: \"^[0-9]*(.[0-9]+)?$\",\n        inputMode: \"decimal\",\n        min: \"0.0000001\"\n      }}\n      InputProps={{ endAdornment }}\n      inputRef={ref}\n      error={Boolean(props.inputError)}\n      label={props.inputError || label}\n      onBlur={props.onBlur}\n      onChange={props.onChange}\n      onFocus={props.selectOnFocus ? event => event.target.select() : undefined}\n      style={props.style}\n      value={props.defaultPrice ? props.defaultPrice : props.manualPrice}\n    />\n  )\n})\n\nexport default React.memo(TradingPrice)\n","import React from \"react\"\nimport { Controller, useForm } from \"react-hook-form\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset, Horizon, Operation, Transaction } from \"stellar-sdk\"\nimport Button from \"@material-ui/core/Button\"\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Typography from \"@material-ui/core/Typography\"\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport GavelIcon from \"@material-ui/icons/Gavel\"\nimport { Account } from \"~App/contexts/accounts\"\nimport { trackError } from \"~App/contexts/notifications\"\nimport { warningColor } from \"~App/theme\"\nimport AssetSelector from \"~Generic/components/AssetSelector\"\nimport { ActionButton, DialogActionsBox } from \"~Generic/components/DialogActions\"\nimport { ReadOnlyTextfield } from \"~Generic/components/FormFields\"\nimport Portal from \"~Generic/components/Portal\"\nimport { useHorizon } from \"~Generic/hooks/stellar\"\nimport { useLiveOrderbook } from \"~Generic/hooks/stellar-subscriptions\"\nimport { RefStateObject, useIsMobile } from \"~Generic/hooks/userinterface\"\nimport { AccountData } from \"~Generic/lib/account\"\nimport { CustomError } from \"~Generic/lib/errors\"\nimport {\n  balancelineToAsset,\n  findMatchingBalanceLine,\n  getAccountMinimumBalance,\n  getSpendableBalance\n} from \"~Generic/lib/stellar\"\nimport { FormBigNumber, isValidAmount } from \"~Generic/lib/form\"\nimport { createTransaction } from \"~Generic/lib/transaction\"\nimport { Box, HorizontalLayout, VerticalLayout } from \"~Layout/components/Box\"\nimport { bigNumberToInputValue, TradingFormValues, useCalculation } from \"../hooks/form\"\nimport TradingPrice from \"./TradingPrice\"\n\nconst useStyles = makeStyles({\n  expansionPanel: {\n    background: \"transparent\",\n    margin: \"8px 0 !important\",\n\n    \"&:before\": {\n      background: \"transparent\"\n    }\n  },\n  expansionPanelSummary: {\n    justifyContent: \"flex-start\",\n    minHeight: \"48px !important\",\n    padding: 0\n  },\n  expansionPanelSummaryContent: {\n    flexGrow: 0,\n    marginTop: \"0 !important\",\n    marginBottom: \"0 !important\"\n  },\n  expansionPanelDetails: {\n    justifyContent: \"flex-start\",\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingTop: 12\n  }\n})\n\ninterface Props {\n  account: Account\n  accountData: AccountData\n  className?: string\n  dialogActionsRef: RefStateObject | null\n  initialPrimaryAsset?: Asset\n  primaryAction: \"buy\" | \"sell\"\n  sendTransaction: (transaction: Transaction) => void\n  style?: React.CSSProperties\n  trustlines: Horizon.BalanceLineAsset[]\n}\n\nfunction TradingForm(props: Props) {\n  const classes = useStyles()\n  const isSmallScreen = useIsMobile()\n  const isSmallHeightScreen = useMediaQuery(\"(max-height: 500px)\")\n  const isSmallScreenXY = isSmallScreen || isSmallHeightScreen\n  const { t } = useTranslation()\n\n  const [expanded, setExpanded] = React.useState(false)\n  const [priceMode, setPriceMode] = React.useState<\"primary\" | \"secondary\">(\"secondary\")\n  const [pending, setPending] = React.useState(false)\n\n  const form = useForm<TradingFormValues>({\n    defaultValues: {\n      primaryAsset: props.initialPrimaryAsset,\n      primaryAmountString: \"\",\n      secondaryAsset: Asset.native(),\n      manualPrice: \"0\"\n    }\n  })\n\n  const sendTransaction = props.sendTransaction\n  const { primaryAsset, secondaryAsset, manualPrice } = form.watch()\n\n  React.useEffect(() => {\n    if (!primaryAsset && props.initialPrimaryAsset) {\n      form.setValue(\"primaryAsset\", props.initialPrimaryAsset)\n    }\n  }, [form, primaryAsset, props.initialPrimaryAsset])\n\n  const horizon = useHorizon(props.account.testnet)\n  const tradePair = useLiveOrderbook(primaryAsset || Asset.native(), secondaryAsset, props.account.testnet)\n\n  const assets = React.useMemo(() => props.trustlines.map(balancelineToAsset), [props.trustlines])\n\n  const calculation = useCalculation({\n    accountData: props.accountData,\n    priceMode,\n    primaryAction: props.primaryAction,\n    tradePair,\n    values: form.getValues()\n  })\n\n  const {\n    maxPrimaryAmount,\n    primaryBalance,\n    defaultPrice,\n    effectivePrice,\n    primaryAmount,\n    relativeSpread,\n    secondaryAmount,\n    secondaryBalance,\n    spendablePrimaryBalance,\n    spendableSecondaryBalance\n  } = calculation\n\n  if (form.formState.touched.primaryAmountString) {\n    // trigger delayed validation to make sure that primaryAmountString is validated with latest calculation results\n    setTimeout(() => form.triggerValidation(\"primaryAmountString\"), 0)\n  }\n\n  const setPrimaryAmountToMax = () => {\n    form.setValue(\"primaryAmountString\", maxPrimaryAmount.toFixed(7))\n  }\n\n  const validateManualPrice = React.useCallback(() => {\n    const value = FormBigNumber(manualPrice).gt(0) ? manualPrice : defaultPrice\n    const valid = isValidAmount(value) && FormBigNumber(value).gt(0)\n    if (!valid) {\n      if (!expanded) {\n        setExpanded(true)\n      }\n      return t<string>(\"trading.validation.invalid-price\")\n    }\n  }, [defaultPrice, expanded, manualPrice, t])\n\n  const submitForm = React.useCallback(async () => {\n    try {\n      setPending(true)\n\n      const error = validateManualPrice()\n      if (error) {\n        form.setError(\"manualPrice\", \"invalid-amount\", error)\n        return\n      }\n\n      if (!primaryAsset) {\n        throw CustomError(\n          \"InvariantViolationError\",\n          \"Invariant violation: Should not be able to submit form without having selected the primary asset.\",\n          { message: \"Should not be able to submit form without having selected the primary asset.\" }\n        )\n      }\n\n      const spendableXLMBalance = getSpendableBalance(\n        getAccountMinimumBalance(props.accountData),\n        findMatchingBalanceLine(props.accountData.balances, Asset.native())\n      )\n      if (spendableXLMBalance.minus(0.5).cmp(0) <= 0) {\n        throw CustomError(\"LowReserveOrderError\", \"Cannot place order because spendable XLM balance is too low.\")\n      }\n\n      const tx = await createTransaction(\n        [\n          props.primaryAction === \"buy\"\n            ? Operation.manageBuyOffer({\n                buyAmount: primaryAmount.toFixed(7),\n                buying: primaryAsset,\n                offerId: 0,\n                price: effectivePrice.toFixed(7),\n                selling: secondaryAsset,\n                withMuxing: true\n              })\n            : Operation.manageSellOffer({\n                amount: primaryAmount.toFixed(7),\n                buying: secondaryAsset,\n                offerId: 0,\n                price: effectivePrice.toFixed(7),\n                selling: primaryAsset,\n                withMuxing: true\n              })\n        ],\n        {\n          accountData: props.accountData,\n          horizon,\n          walletAccount: props.account\n        }\n      )\n      await sendTransaction(tx)\n    } catch (error) {\n      trackError(error)\n    } finally {\n      setPending(false)\n    }\n  }, [\n    form,\n    effectivePrice,\n    horizon,\n    primaryAsset,\n    props.account,\n    props.accountData,\n    props.primaryAction,\n    primaryAmount,\n    secondaryAsset,\n    sendTransaction,\n    validateManualPrice\n  ])\n\n  return (\n    // set minHeight to prevent wrapping of layout when keyboard is shown\n    <VerticalLayout\n      alignItems=\"stretch\"\n      alignSelf={isSmallScreenXY ? undefined : \"center\"}\n      grow={1}\n      minHeight={300}\n      maxHeight=\"100%\"\n      margin={isSmallScreen ? undefined : \"32px 0 0\"}\n      padding=\"16px 0\"\n      shrink={1}\n      width=\"100%\"\n    >\n      <VerticalLayout\n        alignItems=\"stretch\"\n        alignSelf={isSmallScreen ? \"stretch\" : \"center\"}\n        minWidth={isSmallScreen ? \"75%\" : 450}\n        maxWidth={isSmallScreen ? \"100%\" : 500}\n        padding=\"0 2px\"\n        shrink={0}\n        width=\"100%\"\n      >\n        <HorizontalLayout margin=\"8px 0\">\n          <Controller\n            as={\n              <AssetSelector\n                assets={assets}\n                inputError={form.errors.primaryAsset && form.errors.primaryAsset.message}\n                label={\n                  props.primaryAction === \"buy\"\n                    ? t(\"trading.inputs.primary-asset-selector.label.buy\")\n                    : t(\"trading.inputs.primary-asset-selector.label.sell\")\n                }\n                minWidth={75}\n                showXLM\n                style={{ flexGrow: 1, marginRight: 24, maxWidth: 150, width: \"25%\" }}\n                testnet={props.account.testnet}\n                value={primaryAsset}\n              />\n            }\n            control={form.control}\n            name=\"primaryAsset\"\n            rules={{\n              required: t<string>(\"trading.validation.primary-asset-missing\")\n            }}\n          />\n          <TextField\n            name=\"primaryAmountString\"\n            inputRef={form.register({\n              required: t<string>(\"trading.validation.primary-amount-missing\"),\n              validate: value => {\n                const amountInvalid = primaryAmount.lt(0) || (value.length > 0 && primaryAmount.eq(0))\n                const exceedsBalance =\n                  (props.primaryAction === \"sell\" && primaryBalance && primaryAmount.gt(spendablePrimaryBalance)) ||\n                  (props.primaryAction === \"buy\" && secondaryBalance && secondaryAmount.gt(spendableSecondaryBalance))\n\n                if (amountInvalid) {\n                  return t<string>(\"trading.validation.invalid-amount\")\n                } else if (exceedsBalance) {\n                  return t<string>(\"trading.validation.not-enough-balance\")\n                } else {\n                  return true\n                }\n              }\n            })}\n            error={Boolean(form.errors.primaryAmountString)}\n            inputProps={{\n              pattern: \"^[0-9]*(.[0-9]+)?$\",\n              inputMode: \"decimal\",\n              min: \"0.0000001\",\n              max: maxPrimaryAmount.toFixed(7),\n              style: { height: 27 }\n            }}\n            InputProps={{\n              endAdornment:\n                props.primaryAction === \"buy\" ? (\n                  undefined\n                ) : (\n                  <InputAdornment position=\"end\">\n                    <Button\n                      disabled={!primaryAsset || !primaryBalance}\n                      onClick={setPrimaryAmountToMax}\n                      style={{ boxShadow: \"none\", fontWeight: 400 }}\n                    >\n                      {t(\"trading.inputs.primary-amount.max-button.label\")}\n                    </Button>\n                  </InputAdornment>\n                )\n            }}\n            label={\n              form.errors.primaryAmountString && form.errors.primaryAmountString.message\n                ? form.errors.primaryAmountString.message\n                : props.primaryAction === \"buy\"\n                ? t(\"trading.inputs.primary-amount.label.buy\")\n                : t(\"trading.inputs.primary-amount.label.sell\")\n            }\n            placeholder={t(\n              \"trading.inputs.primary-amount.placeholder\",\n              `Max. ${bigNumberToInputValue(maxPrimaryAmount)}`,\n              {\n                amount: bigNumberToInputValue(maxPrimaryAmount)\n              }\n            )}\n            required\n            style={{ flexGrow: 1, flexShrink: 1, width: \"55%\" }}\n          />\n        </HorizontalLayout>\n        <HorizontalLayout margin=\"8px 0 32px\">\n          <Controller\n            as={\n              <AssetSelector\n                assets={assets}\n                label={\n                  props.primaryAction === \"buy\"\n                    ? t(\"trading.inputs.secondary-asset-selector.label.buy\")\n                    : t(\"trading.inputs.secondary-asset-selector.label.sell\")\n                }\n                minWidth={75}\n                showXLM\n                style={{ flexGrow: 1, marginRight: 24, maxWidth: 150, width: \"25%\" }}\n                testnet={props.account.testnet}\n                value={secondaryAsset}\n              />\n            }\n            control={form.control}\n            name=\"secondaryAsset\"\n            rules={{ required: t<string>(\"trading.validation.secondary-asset-missing\") }}\n          />\n          <ReadOnlyTextfield\n            disableUnderline\n            inputProps={{\n              style: { height: 27 }\n            }}\n            label={\n              props.primaryAction === \"buy\"\n                ? t(\"trading.inputs.estimated-costs.label.buy\")\n                : t(\"trading.inputs.estimated-costs.label.sell\")\n            }\n            placeholder={`Max. ${secondaryBalance ? secondaryBalance.balance : \"0\"}`}\n            style={{ flexGrow: 1, flexShrink: 1, width: \"55%\" }}\n            inputMode=\"decimal\"\n            type=\"number\"\n            value={\n              // Format amount without thousands grouping, since it may lead to illegal number input values (#831)\n              bigNumberToInputValue(secondaryAmount, { groupThousands: false })\n            }\n          />\n        </HorizontalLayout>\n        <ExpansionPanel\n          className={classes.expansionPanel}\n          elevation={0}\n          expanded={expanded}\n          onChange={() => setExpanded(!expanded)}\n        >\n          <ExpansionPanelSummary\n            classes={{ root: classes.expansionPanelSummary, content: classes.expansionPanelSummaryContent }}\n            expandIcon={<ExpandMoreIcon />}\n          >\n            <Typography align=\"center\" style={{ flexGrow: 1 }}>\n              {t(\"trading.advanced.header\")}\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n            <Controller\n              as={\n                <TradingPrice\n                  defaultPrice={!form.formState.touched.manualPrice ? defaultPrice : undefined}\n                  inputError={form.errors.manualPrice && form.errors.manualPrice.message}\n                  onSetPriceDenotedIn={setPriceMode}\n                  priceDenotedIn={priceMode}\n                  primaryAsset={primaryAsset}\n                  secondaryAsset={secondaryAsset}\n                  selectOnFocus\n                  style={{ flexGrow: 1, maxWidth: 250, width: \"55%\" }}\n                />\n              }\n              control={form.control}\n              name=\"manualPrice\"\n              rules={{\n                validate: value => {\n                  const valid = isValidAmount(value)\n                  return valid || t<string>(\"trading.validation.invalid-price\")\n                }\n              }}\n              valueName=\"manualPrice\"\n            />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        {relativeSpread >= 0.015 ? (\n          <Box margin=\"32px 0 0\" padding=\"8px 12px\" style={{ background: warningColor }}>\n            <b>{t(\"trading.warning.title\")}</b>\n            <br />\n            {t(\n              \"trading.warning.message\",\n              `The spread between buying and selling price is about ${(relativeSpread * 100).toFixed(1)}%.`,\n              { spread: (relativeSpread * 100).toFixed(1) }\n            )}\n          </Box>\n        ) : null}\n        <Portal target={props.dialogActionsRef?.element}>\n          <DialogActionsBox desktopStyle={{ marginTop: 32 }}>\n            <ActionButton loading={pending} icon={<GavelIcon />} onClick={form.handleSubmit(submitForm)} type=\"primary\">\n              {t(\"trading.action.submit\")}\n            </ActionButton>\n          </DialogActionsBox>\n        </Portal>\n      </VerticalLayout>\n    </VerticalLayout>\n  )\n}\n\nexport default React.memo(TradingForm)\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport { Asset, Horizon, Server, Transaction } from \"stellar-sdk\"\nimport Box from \"@material-ui/core/Box\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { Account } from \"~App/contexts/accounts\"\nimport * as routes from \"~App/routes\"\nimport { ActionButton, DialogActionsBox } from \"~Generic/components/DialogActions\"\nimport { InlineErrorBoundary } from \"~Generic/components/ErrorBoundaries\"\nimport MainTitle from \"~Generic/components/MainTitle\"\nimport Portal from \"~Generic/components/Portal\"\nimport ScrollableBalances from \"~Generic/components/ScrollableBalances\"\nimport TestnetBadge from \"~Generic/components/TestnetBadge\"\nimport ViewLoading from \"~Generic/components/ViewLoading\"\nimport { useLiveAccountData } from \"~Generic/hooks/stellar-subscriptions\"\nimport { useDialogActions, useRouter } from \"~Generic/hooks/userinterface\"\nimport { matchesRoute } from \"~Generic/lib/routes\"\nimport { parseAssetID, stringifyAsset } from \"~Generic/lib/stellar\"\nimport { getLastArgumentFromURL } from \"~Generic/lib/url\"\nimport Carousel from \"~Layout/components/Carousel\"\nimport DialogBody from \"~Layout/components/DialogBody\"\nimport TransactionSender from \"~Transaction/components/TransactionSender\"\nimport MainActionSelection from \"./MainActionSelection\"\nimport TradingForm from \"./TradingForm\"\n\ninterface TradingDialogProps {\n  account: Account\n  horizon: Server\n  onClose: () => void\n  sendTransaction: (transaction: Transaction) => void\n}\n\nfunction getAssetFromPath(pathname: string) {\n  if (matchesRoute(pathname, routes.tradeAsset(\"*\", undefined, \"*\"))) {\n    const lastArgument = getLastArgumentFromURL(pathname)\n    if (lastArgument !== \"buy\" && lastArgument !== \"sell\") {\n      return parseAssetID(lastArgument)\n    }\n  }\n  return undefined\n}\n\nfunction TradingDialog(props: TradingDialogProps) {\n  const accountData = useLiveAccountData(props.account.accountID, props.account.testnet)\n  const dialogActionsRef = useDialogActions()\n  const router = useRouter()\n  const [preselectedAsset, setPreselectedAsset] = React.useState<Asset | undefined>()\n  const { t } = useTranslation()\n\n  React.useEffect(() => {\n    const asset = getAssetFromPath(router.location.pathname)\n    setPreselectedAsset(asset)\n  }, [router.location.pathname])\n\n  const trustlines = React.useMemo(\n    () =>\n      accountData.balances.filter((balance): balance is Horizon.BalanceLineAsset => balance.asset_type !== \"native\"),\n    [accountData.balances]\n  )\n\n  const primaryAction: \"buy\" | \"sell\" | undefined = matchesRoute(\n    router.location.pathname,\n    routes.tradeAsset(\"*\", \"buy\")\n  )\n    ? \"buy\"\n    : matchesRoute(router.location.pathname, routes.tradeAsset(\"*\", \"sell\"))\n    ? \"sell\"\n    : undefined\n\n  const clearPrimaryAction = React.useCallback(() => {\n    router.history.push(\n      routes.tradeAsset(props.account.id, undefined, preselectedAsset ? stringifyAsset(preselectedAsset) : undefined)\n    )\n  }, [preselectedAsset, props.account, router.history])\n\n  const selectPrimaryAction = React.useCallback(\n    (mainAction: \"buy\" | \"sell\") => {\n      router.history.push(\n        routes.tradeAsset(props.account.id, mainAction, preselectedAsset ? stringifyAsset(preselectedAsset) : undefined)\n      )\n    },\n    [preselectedAsset, props.account, router.history]\n  )\n\n  const MainContent = React.useMemo(\n    () => (\n      <Carousel current={primaryAction ? 1 : 0}>\n        <MainActionSelection\n          onSelectBuy={() => selectPrimaryAction(\"buy\")}\n          onSelectSell={() => selectPrimaryAction(\"sell\")}\n        />\n        <React.Suspense fallback={<ViewLoading />}>\n          <TradingForm\n            account={props.account}\n            accountData={accountData}\n            dialogActionsRef={primaryAction ? dialogActionsRef : null}\n            initialPrimaryAsset={preselectedAsset}\n            primaryAction={primaryAction || \"buy\"}\n            sendTransaction={props.sendTransaction}\n            trustlines={trustlines}\n          />\n        </React.Suspense>\n      </Carousel>\n    ),\n    [\n      accountData,\n      dialogActionsRef,\n      preselectedAsset,\n      primaryAction,\n      props.account,\n      props.sendTransaction,\n      selectPrimaryAction,\n      trustlines\n    ]\n  )\n\n  const LinkToManageAssets = React.useMemo(\n    () => (\n      <Box margin=\"32px 0 0\" textAlign=\"center\">\n        <Typography>{t(\"trading.no-assets-info\")}</Typography>\n        <Portal target={dialogActionsRef.element}>\n          <DialogActionsBox>\n            <ActionButton\n              autoFocus\n              onClick={() => router.history.push(routes.manageAccountAssets(props.account.id))}\n              type=\"primary\"\n            >\n              {t(\"trading.action.add-asset\")}\n            </ActionButton>\n          </DialogActionsBox>\n        </Portal>\n      </Box>\n    ),\n    [dialogActionsRef, props.account, router, t]\n  )\n\n  return (\n    <DialogBody\n      top={\n        <>\n          <MainTitle\n            title={\n              <span>\n                {t(\"trading.title\")}\n                {props.account.testnet ? <TestnetBadge style={{ marginLeft: 8 }} /> : null}\n              </span>\n            }\n            onBack={primaryAction ? clearPrimaryAction : props.onClose}\n          />\n          <ScrollableBalances account={props.account} compact />\n        </>\n      }\n      actions={dialogActionsRef}\n    >\n      <InlineErrorBoundary>{trustlines.length > 0 ? MainContent : LinkToManageAssets}</InlineErrorBoundary>\n    </DialogBody>\n  )\n}\n\nfunction TradingDialogContainer(props: Pick<TradingDialogProps, \"account\" | \"onClose\">) {\n  const router = useRouter()\n  const navigateToAccount = () => router.history.push(routes.account(props.account.id))\n\n  return (\n    <TransactionSender account={props.account} onSubmissionCompleted={navigateToAccount}>\n      {txContext => <TradingDialog {...props} {...txContext} />}\n    </TransactionSender>\n  )\n}\n\nexport default TradingDialogContainer\n"],"names":["MainActionSelection","require$$0","require$$1","BigNumber","TradingPrice","Asset","Operation","routes.tradeAsset","TradingForm","Box","routes.manageAccountAssets","ScrollableBalances","routes.account"],"mappings":"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","x_google_ignoreList":[1]}